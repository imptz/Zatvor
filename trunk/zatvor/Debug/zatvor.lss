
zatvor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000012e0  00001374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  00800062  00800062  00001376  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001378  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017e8  00000000  00000000  00001c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078f  00000000  00000000  00003458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000910  00000000  00000000  00003be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  000044f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c98  00000000  00000000  00004b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a90  00000000  00000000  00005818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c0       	rjmp	.+52     	; 0x36 <__ctors_end>
       2:	34 c0       	rjmp	.+104    	; 0x6c <__bad_interrupt>
       4:	33 c0       	rjmp	.+102    	; 0x6c <__bad_interrupt>
       6:	ec c7       	rjmp	.+4056   	; 0xfe0 <__vector_3>
       8:	31 c0       	rjmp	.+98     	; 0x6c <__bad_interrupt>
       a:	30 c0       	rjmp	.+96     	; 0x6c <__bad_interrupt>
       c:	2f c0       	rjmp	.+94     	; 0x6c <__bad_interrupt>
       e:	2e c0       	rjmp	.+92     	; 0x6c <__bad_interrupt>
      10:	2d c0       	rjmp	.+90     	; 0x6c <__bad_interrupt>
      12:	2c c0       	rjmp	.+88     	; 0x6c <__bad_interrupt>
      14:	2b c0       	rjmp	.+86     	; 0x6c <__bad_interrupt>
      16:	af c6       	rjmp	.+3422   	; 0xd76 <__vector_11>
      18:	29 c0       	rjmp	.+82     	; 0x6c <__bad_interrupt>
      1a:	de c4       	rjmp	.+2492   	; 0x9d8 <__vector_13>
      1c:	8a c0       	rjmp	.+276    	; 0x132 <__vector_14>
      1e:	26 c0       	rjmp	.+76     	; 0x6c <__bad_interrupt>
      20:	25 c0       	rjmp	.+74     	; 0x6c <__bad_interrupt>
      22:	24 c0       	rjmp	.+72     	; 0x6c <__bad_interrupt>
      24:	23 c0       	rjmp	.+70     	; 0x6c <__bad_interrupt>
      26:	2a c2       	rjmp	.+1108   	; 0x47c <__stack+0x1d>
      28:	c4 c1       	rjmp	.+904    	; 0x3b2 <_Z13DriveTimeFuncv+0x14>
      2a:	cb c1       	rjmp	.+918    	; 0x3c2 <_Z13DriveTimeFuncv+0x24>
      2c:	d7 c1       	rjmp	.+942    	; 0x3dc <_Z13DriveTimeFuncv+0x3e>
      2e:	eb c1       	rjmp	.+982    	; 0x406 <_Z13DriveTimeFuncv+0x68>
      30:	f6 c1       	rjmp	.+1004   	; 0x41e <_Z13DriveTimeFuncv+0x80>
      32:	01 c2       	rjmp	.+1026   	; 0x436 <_Z13DriveTimeFuncv+0x98>
      34:	08 c2       	rjmp	.+1040   	; 0x446 <_Z13DriveTimeFuncv+0xa8>

00000036 <__ctors_end>:
      36:	11 24       	eor	r1, r1
      38:	1f be       	out	0x3f, r1	; 63
      3a:	cf e5       	ldi	r28, 0x5F	; 95
      3c:	d4 e0       	ldi	r29, 0x04	; 4
      3e:	de bf       	out	0x3e, r29	; 62
      40:	cd bf       	out	0x3d, r28	; 61

00000042 <__do_copy_data>:
      42:	10 e0       	ldi	r17, 0x00	; 0
      44:	a0 e6       	ldi	r26, 0x60	; 96
      46:	b0 e0       	ldi	r27, 0x00	; 0
      48:	e0 ee       	ldi	r30, 0xE0	; 224
      4a:	f2 e1       	ldi	r31, 0x12	; 18
      4c:	02 c0       	rjmp	.+4      	; 0x52 <__do_copy_data+0x10>
      4e:	05 90       	lpm	r0, Z+
      50:	0d 92       	st	X+, r0
      52:	a2 36       	cpi	r26, 0x62	; 98
      54:	b1 07       	cpc	r27, r17
      56:	d9 f7       	brne	.-10     	; 0x4e <__do_copy_data+0xc>

00000058 <__do_clear_bss>:
      58:	11 e0       	ldi	r17, 0x01	; 1
      5a:	a2 e6       	ldi	r26, 0x62	; 98
      5c:	b0 e0       	ldi	r27, 0x00	; 0
      5e:	01 c0       	rjmp	.+2      	; 0x62 <.do_clear_bss_start>

00000060 <.do_clear_bss_loop>:
      60:	1d 92       	st	X+, r1

00000062 <.do_clear_bss_start>:
      62:	a6 30       	cpi	r26, 0x06	; 6
      64:	b1 07       	cpc	r27, r17
      66:	e1 f7       	brne	.-8      	; 0x60 <.do_clear_bss_loop>
      68:	ce d8       	rcall	.-3684   	; 0xfffff206 <__eeprom_end+0xff7ef206>
      6a:	38 c9       	rjmp	.-3472   	; 0xfffff2dc <__eeprom_end+0xff7ef2dc>

0000006c <__bad_interrupt>:
      6c:	c9 cf       	rjmp	.-110    	; 0x0 <__vectors>

0000006e <_Z7InitADCv>:
void ADCExec(void);
void ADCTime(void);

void InitADC(void){
 char i;
 for (i=0;i<8;i++) {MfuncPoint[i]=0;}
      6e:	10 92 63 00 	sts	0x0063, r1
      72:	10 92 62 00 	sts	0x0062, r1
      76:	10 92 65 00 	sts	0x0065, r1
      7a:	10 92 64 00 	sts	0x0064, r1
      7e:	10 92 67 00 	sts	0x0067, r1
      82:	10 92 66 00 	sts	0x0066, r1
      86:	10 92 69 00 	sts	0x0069, r1
      8a:	10 92 68 00 	sts	0x0068, r1
      8e:	10 92 6b 00 	sts	0x006B, r1
      92:	10 92 6a 00 	sts	0x006A, r1
      96:	10 92 6d 00 	sts	0x006D, r1
      9a:	10 92 6c 00 	sts	0x006C, r1
      9e:	10 92 6f 00 	sts	0x006F, r1
      a2:	10 92 6e 00 	sts	0x006E, r1
      a6:	10 92 71 00 	sts	0x0071, r1
      aa:	10 92 70 00 	sts	0x0070, r1
 NumChannel=99;
      ae:	83 e6       	ldi	r24, 0x63	; 99
      b0:	80 93 60 00 	sts	0x0060, r24
 DDRC&=0xfe;
      b4:	a0 98       	cbi	0x14, 0	; 20
 PORTC&=0xfe;
      b6:	a8 98       	cbi	0x15, 0	; 21
 ADMUX=0;
      b8:	17 b8       	out	0x07, r1	; 7
 SFIOR&=0xef;
      ba:	80 b7       	in	r24, 0x30	; 48
      bc:	8f 7e       	andi	r24, 0xEF	; 239
      be:	80 bf       	out	0x30, r24	; 48
 ADCSR=0x8d;
      c0:	8d e8       	ldi	r24, 0x8D	; 141
      c2:	86 b9       	out	0x06, r24	; 6
 RegVirtualTimer(&ADCTime);
      c4:	85 e8       	ldi	r24, 0x85	; 133
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	c9 d7       	rcall	.+3986   	; 0x105c <_Z15RegVirtualTimerPFvvE>
}
      ca:	08 95       	ret

000000cc <_Z7ADCExecv>:

void ADCExec (void){
	do
		if (NumChannel==7){
			NumChannel=0;
      cc:	40 91 60 00 	lds	r20, 0x0060
      d0:	50 e0       	ldi	r21, 0x00	; 0
		}else{
			NumChannel++;
		}
	while (MfuncPoint[NumChannel]==0);
      d2:	82 e6       	ldi	r24, 0x62	; 98
      d4:	90 e0       	ldi	r25, 0x00	; 0
 RegVirtualTimer(&ADCTime);
}

void ADCExec (void){
	do
		if (NumChannel==7){
      d6:	47 30       	cpi	r20, 0x07	; 7
      d8:	11 f0       	breq	.+4      	; 0xde <_Z7ADCExecv+0x12>
			NumChannel=0;
		}else{
			NumChannel++;
      da:	4f 5f       	subi	r20, 0xFF	; 255
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <_Z7ADCExecv+0x14>
}

void ADCExec (void){
	do
		if (NumChannel==7){
			NumChannel=0;
      de:	45 2f       	mov	r20, r21
		}else{
			NumChannel++;
		}
	while (MfuncPoint[NumChannel]==0);
      e0:	e4 2f       	mov	r30, r20
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	ee 0f       	add	r30, r30
      e6:	ff 1f       	adc	r31, r31
      e8:	e8 0f       	add	r30, r24
      ea:	f9 1f       	adc	r31, r25
 ADCSR=0x8d;
 RegVirtualTimer(&ADCTime);
}

void ADCExec (void){
	do
      ec:	20 81       	ld	r18, Z
      ee:	31 81       	ldd	r19, Z+1	; 0x01
      f0:	21 15       	cp	r18, r1
      f2:	31 05       	cpc	r19, r1
      f4:	81 f3       	breq	.-32     	; 0xd6 <_Z7ADCExecv+0xa>
      f6:	40 93 60 00 	sts	0x0060, r20
		}else{
			NumChannel++;
		}
	while (MfuncPoint[NumChannel]==0);
	
	ADMUX&=0xf0;
      fa:	87 b1       	in	r24, 0x07	; 7
      fc:	80 7f       	andi	r24, 0xF0	; 240
      fe:	87 b9       	out	0x07, r24	; 7
	ADMUX|=NumChannel;
     100:	87 b1       	in	r24, 0x07	; 7
     102:	48 2b       	or	r20, r24
     104:	47 b9       	out	0x07, r20	; 7
	ADCSR|=0x40;
     106:	36 9a       	sbi	0x06, 6	; 6
}
     108:	08 95       	ret

0000010a <_Z7ADCTimev>:

ISR(ADC_vect){
(*MfuncPoint[NumChannel])();
}

void ADCTime(void) {ADCExec();}
     10a:	e0 df       	rcall	.-64     	; 0xcc <_Z7ADCExecv>
     10c:	08 95       	ret

0000010e <_Z10RegChannelPFvvEh>:
	ADMUX|=NumChannel;
	ADCSR|=0x40;
}

void RegChannel(TPointToHandlerADCInterrupt fpoint,unsigned char channel){
	if (channel < 8){
     10e:	68 30       	cpi	r22, 0x08	; 8
     110:	78 f4       	brcc	.+30     	; 0x130 <_Z10RegChannelPFvvEh+0x22>
		MfuncPoint[channel]=fpoint;
     112:	e6 2f       	mov	r30, r22
     114:	f0 e0       	ldi	r31, 0x00	; 0
     116:	ee 0f       	add	r30, r30
     118:	ff 1f       	adc	r31, r31
     11a:	ee 59       	subi	r30, 0x9E	; 158
     11c:	ff 4f       	sbci	r31, 0xFF	; 255
     11e:	91 83       	std	Z+1, r25	; 0x01
     120:	80 83       	st	Z, r24
		if (NumChannel == 99){
     122:	80 91 60 00 	lds	r24, 0x0060
     126:	83 36       	cpi	r24, 0x63	; 99
     128:	19 f4       	brne	.+6      	; 0x130 <_Z10RegChannelPFvvEh+0x22>
			NumChannel=0;ADCExec();
     12a:	10 92 60 00 	sts	0x0060, r1
     12e:	ce df       	rcall	.-100    	; 0xcc <_Z7ADCExecv>
     130:	08 95       	ret

00000132 <__vector_14>:
		}
	}
}

ISR(ADC_vect){
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	6f 93       	push	r22
     146:	7f 93       	push	r23
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	af 93       	push	r26
     14e:	bf 93       	push	r27
     150:	ef 93       	push	r30
     152:	ff 93       	push	r31
(*MfuncPoint[NumChannel])();
     154:	e0 91 60 00 	lds	r30, 0x0060
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ee 59       	subi	r30, 0x9E	; 158
     160:	ff 4f       	sbci	r31, 0xFF	; 255
     162:	01 90       	ld	r0, Z+
     164:	f0 81       	ld	r31, Z
     166:	e0 2d       	mov	r30, r0
     168:	09 95       	icall
}
     16a:	ff 91       	pop	r31
     16c:	ef 91       	pop	r30
     16e:	bf 91       	pop	r27
     170:	af 91       	pop	r26
     172:	9f 91       	pop	r25
     174:	8f 91       	pop	r24
     176:	7f 91       	pop	r23
     178:	6f 91       	pop	r22
     17a:	5f 91       	pop	r21
     17c:	4f 91       	pop	r20
     17e:	3f 91       	pop	r19
     180:	2f 91       	pop	r18
     182:	0f 90       	pop	r0
     184:	0f be       	out	0x3f, r0	; 63
     186:	0f 90       	pop	r0
     188:	1f 90       	pop	r1
     18a:	18 95       	reti

0000018c <_Z15ButtonsTimeFuncv>:
  DDRD&=0xfc;PORTD&=0xfc;
}

void ButtonsTimeFunc(void){
//  bTemp = (PIND&0x01);
	bTemp = (PINC&0x20)>>5;
     18c:	83 b3       	in	r24, 0x13	; 19
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	80 72       	andi	r24, 0x20	; 32
     192:	90 70       	andi	r25, 0x00	; 0
     194:	95 95       	asr	r25
     196:	87 95       	ror	r24
     198:	95 95       	asr	r25
     19a:	87 95       	ror	r24
     19c:	95 95       	asr	r25
     19e:	87 95       	ror	r24
     1a0:	95 95       	asr	r25
     1a2:	87 95       	ror	r24
     1a4:	95 95       	asr	r25
     1a6:	87 95       	ror	r24
     1a8:	80 93 72 00 	sts	0x0072, r24
	switch (bTemp){
     1ac:	88 23       	and	r24, r24
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <_Z15ButtonsTimeFuncv+0x2a>
     1b0:	81 30       	cpi	r24, 0x01	; 1
     1b2:	a1 f4       	brne	.+40     	; 0x1dc <_Z15ButtonsTimeFuncv+0x50>
     1b4:	0a c0       	rjmp	.+20     	; 0x1ca <_Z15ButtonsTimeFuncv+0x3e>
		case 0: bLevel0[0]++;break;
     1b6:	80 91 7c 00 	lds	r24, 0x007C
     1ba:	90 91 7d 00 	lds	r25, 0x007D
     1be:	01 96       	adiw	r24, 0x01	; 1
     1c0:	90 93 7d 00 	sts	0x007D, r25
     1c4:	80 93 7c 00 	sts	0x007C, r24
     1c8:	09 c0       	rjmp	.+18     	; 0x1dc <_Z15ButtonsTimeFuncv+0x50>
		case 1: bLevel1[0]++;break;
     1ca:	80 91 76 00 	lds	r24, 0x0076
     1ce:	90 91 77 00 	lds	r25, 0x0077
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	90 93 77 00 	sts	0x0077, r25
     1d8:	80 93 76 00 	sts	0x0076, r24
	}
  
	bTemp = (PIND&0x02)>>1;
     1dc:	80 b3       	in	r24, 0x10	; 16
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	82 70       	andi	r24, 0x02	; 2
     1e2:	90 70       	andi	r25, 0x00	; 0
     1e4:	95 95       	asr	r25
     1e6:	87 95       	ror	r24
     1e8:	80 93 72 00 	sts	0x0072, r24
	switch (bTemp){
     1ec:	88 23       	and	r24, r24
     1ee:	61 f0       	breq	.+24     	; 0x208 <_Z15ButtonsTimeFuncv+0x7c>
     1f0:	81 30       	cpi	r24, 0x01	; 1
     1f2:	99 f4       	brne	.+38     	; 0x21a <_Z15ButtonsTimeFuncv+0x8e>
		case 1: bLevel0[1]++;break;
     1f4:	80 91 7e 00 	lds	r24, 0x007E
     1f8:	90 91 7f 00 	lds	r25, 0x007F
     1fc:	01 96       	adiw	r24, 0x01	; 1
     1fe:	90 93 7f 00 	sts	0x007F, r25
     202:	80 93 7e 00 	sts	0x007E, r24
     206:	09 c0       	rjmp	.+18     	; 0x21a <_Z15ButtonsTimeFuncv+0x8e>
		case 0: bLevel1[1]++;break;
     208:	80 91 78 00 	lds	r24, 0x0078
     20c:	90 91 79 00 	lds	r25, 0x0079
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 79 00 	sts	0x0079, r25
     216:	80 93 78 00 	sts	0x0078, r24
	}
	bTemp = (PIND&0x01);
     21a:	80 b3       	in	r24, 0x10	; 16
     21c:	81 70       	andi	r24, 0x01	; 1
     21e:	80 93 72 00 	sts	0x0072, r24
	//  bTemp = (PINC&0x20)>>5;
	switch (bTemp){
     222:	88 23       	and	r24, r24
     224:	19 f0       	breq	.+6      	; 0x22c <_Z15ButtonsTimeFuncv+0xa0>
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	a1 f4       	brne	.+40     	; 0x252 <_Z15ButtonsTimeFuncv+0xc6>
     22a:	0a c0       	rjmp	.+20     	; 0x240 <_Z15ButtonsTimeFuncv+0xb4>
		case 0: bLevel0[2]++;break;
     22c:	80 91 80 00 	lds	r24, 0x0080
     230:	90 91 81 00 	lds	r25, 0x0081
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	90 93 81 00 	sts	0x0081, r25
     23a:	80 93 80 00 	sts	0x0080, r24
     23e:	09 c0       	rjmp	.+18     	; 0x252 <_Z15ButtonsTimeFuncv+0xc6>
		case 1: bLevel1[2]++;break;
     240:	80 91 7a 00 	lds	r24, 0x007A
     244:	90 91 7b 00 	lds	r25, 0x007B
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	90 93 7b 00 	sts	0x007B, r25
     24e:	80 93 7a 00 	sts	0x007A, r24
	}
  
	if (bLCounter!=cBCounterMax){
     252:	80 91 82 00 	lds	r24, 0x0082
     256:	90 91 83 00 	lds	r25, 0x0083
     25a:	84 36       	cpi	r24, 0x64	; 100
     25c:	91 05       	cpc	r25, r1
     25e:	31 f0       	breq	.+12     	; 0x26c <_Z15ButtonsTimeFuncv+0xe0>
		bLCounter++;
     260:	01 96       	adiw	r24, 0x01	; 1
     262:	90 93 83 00 	sts	0x0083, r25
     266:	80 93 82 00 	sts	0x0082, r24
     26a:	08 95       	ret
	}
	else{
		f_bTrueVal=1;
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	80 93 84 00 	sts	0x0084, r24
		if (bLevel0[0]>=cBLevelMax){
     272:	80 91 7c 00 	lds	r24, 0x007C
     276:	90 91 7d 00 	lds	r25, 0x007D
     27a:	8a 35       	cpi	r24, 0x5A	; 90
     27c:	91 05       	cpc	r25, r1
     27e:	18 f0       	brcs	.+6      	; 0x286 <_Z15ButtonsTimeFuncv+0xfa>
			bVal[0]=0;
     280:	10 92 73 00 	sts	0x0073, r1
     284:	0e c0       	rjmp	.+28     	; 0x2a2 <_Z15ButtonsTimeFuncv+0x116>
		}
		else
			if (bLevel1[0]>=cBLevelMax){
     286:	80 91 76 00 	lds	r24, 0x0076
     28a:	90 91 77 00 	lds	r25, 0x0077
     28e:	8a 35       	cpi	r24, 0x5A	; 90
     290:	91 05       	cpc	r25, r1
     292:	20 f0       	brcs	.+8      	; 0x29c <_Z15ButtonsTimeFuncv+0x110>
				bVal[0]=1;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	80 93 73 00 	sts	0x0073, r24
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <_Z15ButtonsTimeFuncv+0x116>
			}else{
				bVal[0]=2;
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	80 93 73 00 	sts	0x0073, r24
			}
			
		if (bLevel0[1]>=cBLevelMax){
     2a2:	80 91 7e 00 	lds	r24, 0x007E
     2a6:	90 91 7f 00 	lds	r25, 0x007F
     2aa:	8a 35       	cpi	r24, 0x5A	; 90
     2ac:	91 05       	cpc	r25, r1
     2ae:	18 f0       	brcs	.+6      	; 0x2b6 <_Z15ButtonsTimeFuncv+0x12a>
			bVal[1]=0;
     2b0:	10 92 74 00 	sts	0x0074, r1
     2b4:	0e c0       	rjmp	.+28     	; 0x2d2 <_Z15ButtonsTimeFuncv+0x146>
		}else
			if (bLevel1[1]>=cBLevelMax){
     2b6:	80 91 78 00 	lds	r24, 0x0078
     2ba:	90 91 79 00 	lds	r25, 0x0079
     2be:	8a 35       	cpi	r24, 0x5A	; 90
     2c0:	91 05       	cpc	r25, r1
     2c2:	20 f0       	brcs	.+8      	; 0x2cc <_Z15ButtonsTimeFuncv+0x140>
				bVal[1]=1;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	80 93 74 00 	sts	0x0074, r24
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <_Z15ButtonsTimeFuncv+0x146>
			}else{
				bVal[1]=2;
     2cc:	82 e0       	ldi	r24, 0x02	; 2
     2ce:	80 93 74 00 	sts	0x0074, r24
			}
			
		if (bLevel0[2]>=cBLevelMax){
     2d2:	80 91 80 00 	lds	r24, 0x0080
     2d6:	90 91 81 00 	lds	r25, 0x0081
     2da:	8a 35       	cpi	r24, 0x5A	; 90
     2dc:	91 05       	cpc	r25, r1
     2de:	18 f0       	brcs	.+6      	; 0x2e6 <_Z15ButtonsTimeFuncv+0x15a>
			bVal[2]=0;
     2e0:	10 92 75 00 	sts	0x0075, r1
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <_Z15ButtonsTimeFuncv+0x176>
		}else
			if (bLevel1[2]>=cBLevelMax){
     2e6:	80 91 7a 00 	lds	r24, 0x007A
     2ea:	90 91 7b 00 	lds	r25, 0x007B
     2ee:	8a 35       	cpi	r24, 0x5A	; 90
     2f0:	91 05       	cpc	r25, r1
     2f2:	20 f0       	brcs	.+8      	; 0x2fc <_Z15ButtonsTimeFuncv+0x170>
				bVal[2]=1;
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	80 93 75 00 	sts	0x0075, r24
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <_Z15ButtonsTimeFuncv+0x176>
			}else{
				bVal[2]=2;
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	80 93 75 00 	sts	0x0075, r24
			}
			
		bLCounter=0;
     302:	10 92 83 00 	sts	0x0083, r1
     306:	10 92 82 00 	sts	0x0082, r1
		bLevel0[0]=0;bLevel1[0]=0;
     30a:	10 92 7d 00 	sts	0x007D, r1
     30e:	10 92 7c 00 	sts	0x007C, r1
     312:	10 92 77 00 	sts	0x0077, r1
     316:	10 92 76 00 	sts	0x0076, r1
		bLevel0[1]=0;bLevel1[1]=0;
     31a:	10 92 7f 00 	sts	0x007F, r1
     31e:	10 92 7e 00 	sts	0x007E, r1
     322:	10 92 79 00 	sts	0x0079, r1
     326:	10 92 78 00 	sts	0x0078, r1
		bLevel0[2]=0;bLevel1[2]=0;
     32a:	10 92 81 00 	sts	0x0081, r1
     32e:	10 92 80 00 	sts	0x0080, r1
     332:	10 92 7b 00 	sts	0x007B, r1
     336:	10 92 7a 00 	sts	0x007A, r1
     33a:	08 95       	ret

0000033c <_Z11InitButtonsv>:


void ButtonsTimeFunc(void);

void InitButtons(void){
  f_bTrueVal=0;
     33c:	10 92 84 00 	sts	0x0084, r1
  bLCounter=0;
     340:	10 92 83 00 	sts	0x0083, r1
     344:	10 92 82 00 	sts	0x0082, r1
  bLevel0[0]=0;bLevel0[1]=0;bLevel0[2]=0;
     348:	10 92 7d 00 	sts	0x007D, r1
     34c:	10 92 7c 00 	sts	0x007C, r1
     350:	10 92 7f 00 	sts	0x007F, r1
     354:	10 92 7e 00 	sts	0x007E, r1
     358:	10 92 81 00 	sts	0x0081, r1
     35c:	10 92 80 00 	sts	0x0080, r1
  bLevel1[0]=0;bLevel1[1]=0;bLevel1[2]=0;
     360:	10 92 77 00 	sts	0x0077, r1
     364:	10 92 76 00 	sts	0x0076, r1
     368:	10 92 79 00 	sts	0x0079, r1
     36c:	10 92 78 00 	sts	0x0078, r1
     370:	10 92 7b 00 	sts	0x007B, r1
     374:	10 92 7a 00 	sts	0x007A, r1
  bVal[0]=1;bVal[1]=1;bVal[2]=1;
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	80 93 73 00 	sts	0x0073, r24
     37e:	80 93 74 00 	sts	0x0074, r24
     382:	80 93 75 00 	sts	0x0075, r24
  RegVirtualTimer(&ButtonsTimeFunc);
     386:	86 ec       	ldi	r24, 0xC6	; 198
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	68 d6       	rcall	.+3280   	; 0x105c <_Z15RegVirtualTimerPFvvE>
  DDRC&=0xdf;PORTC&=0xdf;
     38c:	a5 98       	cbi	0x14, 5	; 20
     38e:	ad 98       	cbi	0x15, 5	; 21
  DDRD&=0xfc;PORTD&=0xfc;
     390:	81 b3       	in	r24, 0x11	; 17
     392:	8c 7f       	andi	r24, 0xFC	; 252
     394:	81 bb       	out	0x11, r24	; 17
     396:	82 b3       	in	r24, 0x12	; 18
     398:	8c 7f       	andi	r24, 0xFC	; 252
     39a:	82 bb       	out	0x12, r24	; 18
}
     39c:	08 95       	ret

0000039e <_Z13DriveTimeFuncv>:
	return 0;
}

void DriveTimeFunc(void)
{
 switch (drivePhase)
     39e:	e0 91 a2 00 	lds	r30, 0x00A2
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	e8 30       	cpi	r30, 0x08	; 8
     3a6:	f1 05       	cpc	r31, r1
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <_Z13DriveTimeFuncv+0xe>
     3aa:	55 c0       	rjmp	.+170    	; 0x456 <_Z13DriveTimeFuncv+0xb8>
     3ac:	ed 5e       	subi	r30, 0xED	; 237
     3ae:	ff 4f       	sbci	r31, 0xFF	; 255
     3b0:	09 94       	ijmp
 {
   case 0:
    break;
   case 1:
    bridge_off;
     3b2:	97 98       	cbi	0x12, 7	; 18
     3b4:	88 b3       	in	r24, 0x18	; 24
     3b6:	88 7f       	andi	r24, 0xF8	; 248
     3b8:	88 bb       	out	0x18, r24	; 24
    drivePhase=2;
     3ba:	82 e0       	ldi	r24, 0x02	; 2
     3bc:	80 93 a2 00 	sts	0x00A2, r24
    break;
     3c0:	08 95       	ret
   case 2:
    bridge_down_on;
     3c2:	97 98       	cbi	0x12, 7	; 18
     3c4:	c0 98       	cbi	0x18, 0	; 24
     3c6:	88 b3       	in	r24, 0x18	; 24
     3c8:	86 60       	ori	r24, 0x06	; 6
     3ca:	88 bb       	out	0x18, r24	; 24
    driveStopCounter=0;
     3cc:	10 92 a1 00 	sts	0x00A1, r1
     3d0:	10 92 a0 00 	sts	0x00A0, r1
    drivePhase=3;
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	80 93 a2 00 	sts	0x00A2, r24
    break;
     3da:	08 95       	ret
   case 3:
    if (driveStopCounter==const_driveStopCounter-10)
     3dc:	80 91 a0 00 	lds	r24, 0x00A0
     3e0:	90 91 a1 00 	lds	r25, 0x00A1
     3e4:	80 3f       	cpi	r24, 0xF0	; 240
     3e6:	91 05       	cpc	r25, r1
     3e8:	41 f4       	brne	.+16     	; 0x3fa <_Z13DriveTimeFuncv+0x5c>
    {
      bridge_off;
     3ea:	97 98       	cbi	0x12, 7	; 18
     3ec:	88 b3       	in	r24, 0x18	; 24
     3ee:	88 7f       	andi	r24, 0xF8	; 248
     3f0:	88 bb       	out	0x18, r24	; 24
      drivePhase=10;
     3f2:	8a e0       	ldi	r24, 0x0A	; 10
     3f4:	80 93 a2 00 	sts	0x00A2, r24
     3f8:	08 95       	ret
    }
    else driveStopCounter++;
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	90 93 a1 00 	sts	0x00A1, r25
     400:	80 93 a0 00 	sts	0x00A0, r24
     404:	08 95       	ret
    break;
   case 4:
     if (driveStartCounter--==0) {drivePhase=6;}
     406:	80 91 85 00 	lds	r24, 0x0085
     40a:	98 2f       	mov	r25, r24
     40c:	91 50       	subi	r25, 0x01	; 1
     40e:	90 93 85 00 	sts	0x0085, r25
     412:	88 23       	and	r24, r24
     414:	99 f5       	brne	.+102    	; 0x47c <__stack+0x1d>
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	80 93 a2 00 	sts	0x00A2, r24
     41c:	08 95       	ret
     break;
   case 5:
     if (driveStartCounter--==0) {drivePhase=7;}
     41e:	80 91 85 00 	lds	r24, 0x0085
     422:	98 2f       	mov	r25, r24
     424:	91 50       	subi	r25, 0x01	; 1
     426:	90 93 85 00 	sts	0x0085, r25
     42a:	88 23       	and	r24, r24
     42c:	39 f5       	brne	.+78     	; 0x47c <__stack+0x1d>
     42e:	87 e0       	ldi	r24, 0x07	; 7
     430:	80 93 a2 00 	sts	0x00A2, r24
     434:	08 95       	ret
     break;
   case 6:
    drivePhase=0;
     436:	10 92 a2 00 	sts	0x00A2, r1
    bridge_start_1_1;
     43a:	97 98       	cbi	0x12, 7	; 18
     43c:	c2 98       	cbi	0x18, 2	; 24
     43e:	88 b3       	in	r24, 0x18	; 24
     440:	83 60       	ori	r24, 0x03	; 3
     442:	88 bb       	out	0x18, r24	; 24
    break;
     444:	08 95       	ret
   case 7:
    drivePhase=0;
     446:	10 92 a2 00 	sts	0x00A2, r1
    bridge_start_2_1;
     44a:	88 b3       	in	r24, 0x18	; 24
     44c:	8c 7f       	andi	r24, 0xFC	; 252
     44e:	88 bb       	out	0x18, r24	; 24
     450:	97 9a       	sbi	0x12, 7	; 18
     452:	c2 9a       	sbi	0x18, 2	; 24
    break;
     454:	08 95       	ret
   default:
    if (driveStopCounter==const_driveStopCounter)
     456:	80 91 a0 00 	lds	r24, 0x00A0
     45a:	90 91 a1 00 	lds	r25, 0x00A1
     45e:	8a 3f       	cpi	r24, 0xFA	; 250
     460:	91 05       	cpc	r25, r1
     462:	39 f4       	brne	.+14     	; 0x472 <__stack+0x13>
    {
      drivePhase=0;
     464:	10 92 a2 00 	sts	0x00A2, r1
      driveDirect=0;
     468:	10 92 9f 00 	sts	0x009F, r1
     46c:	10 92 9e 00 	sts	0x009E, r1
     470:	08 95       	ret
    }
    else driveStopCounter++;
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	90 93 a1 00 	sts	0x00A1, r25
     478:	80 93 a0 00 	sts	0x00A0, r24
     47c:	08 95       	ret

0000047e <_Z9DriveInitv>:
void TestMaxCurrent(char,unsigned int);
void CalculateVoltage(unsigned int);


void DriveInit(void){
	DDRD|=0x80;DDRB|=0x07;PORTD&=0x7f;PORTB&=0xf8;
     47e:	8f 9a       	sbi	0x11, 7	; 17
     480:	87 b3       	in	r24, 0x17	; 23
     482:	87 60       	ori	r24, 0x07	; 7
     484:	87 bb       	out	0x17, r24	; 23
     486:	97 98       	cbi	0x12, 7	; 18
     488:	88 b3       	in	r24, 0x18	; 24
     48a:	88 7f       	andi	r24, 0xF8	; 248
     48c:	88 bb       	out	0x18, r24	; 24
	bridge_off;
     48e:	97 98       	cbi	0x12, 7	; 18
     490:	88 b3       	in	r24, 0x18	; 24
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	88 bb       	out	0x18, r24	; 24
	driveStopCounter=0;
     496:	10 92 a1 00 	sts	0x00A1, r1
     49a:	10 92 a0 00 	sts	0x00A0, r1
	drivePhase=0;
     49e:	10 92 a2 00 	sts	0x00A2, r1
	driveDirect=0;
     4a2:	10 92 9f 00 	sts	0x009F, r1
     4a6:	10 92 9e 00 	sts	0x009E, r1
	RegVirtualTimer(&DriveTimeFunc);
     4aa:	8f ec       	ldi	r24, 0xCF	; 207
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	d6 d5       	rcall	.+2988   	; 0x105c <_Z15RegVirtualTimerPFvvE>
	RegChannel(&ADCVoltage,ADCChannel_0);
     4b0:	85 ea       	ldi	r24, 0xA5	; 165
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	2b de       	rcall	.-938    	; 0x10e <_Z10RegChannelPFvvEh>
	RegChannel(&ADCCurrent0,ADCChannel_6);
     4b8:	82 e8       	ldi	r24, 0x82	; 130
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	66 e0       	ldi	r22, 0x06	; 6
     4be:	27 de       	rcall	.-946    	; 0x10e <_Z10RegChannelPFvvEh>
	RegChannel(&ADCCurrent1,ADCChannel_7);
     4c0:	84 e6       	ldi	r24, 0x64	; 100
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	67 e0       	ldi	r22, 0x07	; 7
     4c6:	23 de       	rcall	.-954    	; 0x10e <_Z10RegChannelPFvvEh>
	MaxCurrent0[0]=initMaxCurrent0;MaxCurrent0[1]=initMaxCurrent0;
     4c8:	8c e3       	ldi	r24, 0x3C	; 60
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	90 93 95 00 	sts	0x0095, r25
     4d0:	80 93 94 00 	sts	0x0094, r24
     4d4:	90 93 97 00 	sts	0x0097, r25
     4d8:	80 93 96 00 	sts	0x0096, r24
	MaxCurrent1[0]=initMaxCurrent1;MaxCurrent1[1]=initMaxCurrent1;
     4dc:	84 e6       	ldi	r24, 0x64	; 100
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	90 93 8d 00 	sts	0x008D, r25
     4e4:	80 93 8c 00 	sts	0x008C, r24
     4e8:	90 93 8f 00 	sts	0x008F, r25
     4ec:	80 93 8e 00 	sts	0x008E, r24
	countTimeMaxCurrent0[0]=0;countTimeMaxCurrent0[1]=0;
     4f0:	10 92 91 00 	sts	0x0091, r1
     4f4:	10 92 90 00 	sts	0x0090, r1
     4f8:	10 92 93 00 	sts	0x0093, r1
     4fc:	10 92 92 00 	sts	0x0092, r1
	countTimeMaxCurrent1[0]=0;countTimeMaxCurrent1[1]=0;
     500:	10 92 89 00 	sts	0x0089, r1
     504:	10 92 88 00 	sts	0x0088, r1
     508:	10 92 8b 00 	sts	0x008B, r1
     50c:	10 92 8a 00 	sts	0x008A, r1
	f_excessCurrent=0;
     510:	10 92 87 00 	sts	0x0087, r1
	voltage=0;
     514:	10 92 99 00 	sts	0x0099, r1
     518:	10 92 98 00 	sts	0x0098, r1
	current[0]=0;
     51c:	10 92 9b 00 	sts	0x009B, r1
     520:	10 92 9a 00 	sts	0x009A, r1
	current[1]=0;
     524:	10 92 9d 00 	sts	0x009D, r1
     528:	10 92 9c 00 	sts	0x009C, r1
}
     52c:	08 95       	ret

0000052e <_Z9DriveMoveh>:

unsigned char DriveMove(unsigned char p){
	// 2 - close, 1 - open
	switch (p)
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	f9 f0       	breq	.+62     	; 0x570 <_Z9DriveMoveh+0x42>
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	20 f0       	brcs	.+8      	; 0x53e <_Z9DriveMoveh+0x10>
     536:	82 30       	cpi	r24, 0x02	; 2
     538:	09 f0       	breq	.+2      	; 0x53c <_Z9DriveMoveh+0xe>
     53a:	54 c0       	rjmp	.+168    	; 0x5e4 <_Z9DriveMoveh+0xb6>
     53c:	34 c0       	rjmp	.+104    	; 0x5a6 <_Z9DriveMoveh+0x78>
	{
		case 0:
			if ((driveDirect!=1)&&(driveDirect!=2)) {return 0;}
     53e:	80 91 9e 00 	lds	r24, 0x009E
     542:	90 91 9f 00 	lds	r25, 0x009F
     546:	9c 01       	movw	r18, r24
     548:	21 50       	subi	r18, 0x01	; 1
     54a:	30 40       	sbci	r19, 0x00	; 0
     54c:	22 30       	cpi	r18, 0x02	; 2
     54e:	31 05       	cpc	r19, r1
     550:	08 f0       	brcs	.+2      	; 0x554 <_Z9DriveMoveh+0x26>
     552:	4a c0       	rjmp	.+148    	; 0x5e8 <_Z9DriveMoveh+0xba>
			else if (driveDirect==0) {return 1;}
     554:	00 97       	sbiw	r24, 0x00	; 0
     556:	09 f4       	brne	.+2      	; 0x55a <_Z9DriveMoveh+0x2c>
     558:	49 c0       	rjmp	.+146    	; 0x5ec <_Z9DriveMoveh+0xbe>
			{
				drivePhase=1;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 a2 00 	sts	0x00A2, r24
				driveDirect=const_driveStopCounter;
     560:	8a ef       	ldi	r24, 0xFA	; 250
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	90 93 9f 00 	sts	0x009F, r25
     568:	80 93 9e 00 	sts	0x009E, r24
				return 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret
			}
			break;
	case 1:
	if ((driveDirect!=0)&&(driveDirect!=1)) {return 0;}
     570:	80 91 9e 00 	lds	r24, 0x009E
     574:	90 91 9f 00 	lds	r25, 0x009F
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	91 05       	cpc	r25, r1
     57c:	c8 f5       	brcc	.+114    	; 0x5f0 <_Z9DriveMoveh+0xc2>
	else if (driveDirect==1) {return 1;}
     57e:	81 30       	cpi	r24, 0x01	; 1
     580:	91 05       	cpc	r25, r1
     582:	c1 f1       	breq	.+112    	; 0x5f4 <_Z9DriveMoveh+0xc6>
	{
		drivePhase=4;
     584:	84 e0       	ldi	r24, 0x04	; 4
     586:	80 93 a2 00 	sts	0x00A2, r24
		driveDirect=1;
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	90 93 9f 00 	sts	0x009F, r25
     592:	80 93 9e 00 	sts	0x009E, r24
		bridge_start_1_0;
     596:	97 98       	cbi	0x12, 7	; 18
     598:	c2 98       	cbi	0x18, 2	; 24
     59a:	c0 9a       	sbi	0x18, 0	; 24
		driveStartCounter=const_driveStartCounter;
     59c:	83 e0       	ldi	r24, 0x03	; 3
     59e:	80 93 85 00 	sts	0x0085, r24
		return 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	08 95       	ret
	}
	break;
	case 2:
	if ((driveDirect!=0)&&(driveDirect!=2)) {return 0;}
     5a6:	20 91 9e 00 	lds	r18, 0x009E
     5aa:	30 91 9f 00 	lds	r19, 0x009F
     5ae:	21 15       	cp	r18, r1
     5b0:	31 05       	cpc	r19, r1
     5b2:	31 f0       	breq	.+12     	; 0x5c0 <_Z9DriveMoveh+0x92>
unsigned char DriveMove(unsigned char p){
	// 2 - close, 1 - open
	switch (p)
	{
		case 0:
			if ((driveDirect!=1)&&(driveDirect!=2)) {return 0;}
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	22 30       	cpi	r18, 0x02	; 2
     5b8:	31 05       	cpc	r19, r1
     5ba:	e9 f0       	breq	.+58     	; 0x5f6 <_Z9DriveMoveh+0xc8>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	08 95       	ret
	break;
	case 2:
	if ((driveDirect!=0)&&(driveDirect!=2)) {return 0;}
	else if (driveDirect==2) {return 1;}
	{
		drivePhase=5;
     5c0:	85 e0       	ldi	r24, 0x05	; 5
     5c2:	80 93 a2 00 	sts	0x00A2, r24
		driveDirect=2;
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	90 93 9f 00 	sts	0x009F, r25
     5ce:	80 93 9e 00 	sts	0x009E, r24
		bridge_start_2_0;
     5d2:	88 b3       	in	r24, 0x18	; 24
     5d4:	8c 7f       	andi	r24, 0xFC	; 252
     5d6:	88 bb       	out	0x18, r24	; 24
     5d8:	97 9a       	sbi	0x12, 7	; 18
		driveStartCounter=const_driveStartCounter;
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	80 93 85 00 	sts	0x0085, r24
		return 1;
     5e0:	81 e0       	ldi	r24, 0x01	; 1
     5e2:	08 95       	ret
	}
	break;
	}
	return 0;
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	08 95       	ret
unsigned char DriveMove(unsigned char p){
	// 2 - close, 1 - open
	switch (p)
	{
		case 0:
			if ((driveDirect!=1)&&(driveDirect!=2)) {return 0;}
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	08 95       	ret
			else if (driveDirect==0) {return 1;}
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret
				driveDirect=const_driveStopCounter;
				return 1;
			}
			break;
	case 1:
	if ((driveDirect!=0)&&(driveDirect!=1)) {return 0;}
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	08 95       	ret
	else if (driveDirect==1) {return 1;}
     5f4:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	break;
	}
	return 0;
}
     5f6:	08 95       	ret

000005f8 <_Z14TestMaxCurrentcj>:
 }
}

void TestMaxCurrent(char n,unsigned int t)
{
 if (t>MaxCurrent0[n])
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	fc 01       	movw	r30, r24
     5fc:	ee 0f       	add	r30, r30
     5fe:	ff 1f       	adc	r31, r31
     600:	ec 56       	subi	r30, 0x6C	; 108
     602:	ff 4f       	sbci	r31, 0xFF	; 255
     604:	20 81       	ld	r18, Z
     606:	31 81       	ldd	r19, Z+1	; 0x01
     608:	26 17       	cp	r18, r22
     60a:	37 07       	cpc	r19, r23
     60c:	18 f5       	brcc	.+70     	; 0x654 <_Z14TestMaxCurrentcj+0x5c>
  if (countTimeMaxCurrent0[n]==const_countTimeMaxCurrent0)
     60e:	fc 01       	movw	r30, r24
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	e0 57       	subi	r30, 0x70	; 112
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	40 81       	ld	r20, Z
     61a:	51 81       	ldd	r21, Z+1	; 0x01
     61c:	22 e0       	ldi	r18, 0x02	; 2
     61e:	4c 3b       	cpi	r20, 0xBC	; 188
     620:	52 07       	cpc	r21, r18
     622:	69 f4       	brne	.+26     	; 0x63e <_Z14TestMaxCurrentcj+0x46>
   {
    countTimeMaxCurrent0[n]=0;
     624:	fc 01       	movw	r30, r24
     626:	ee 0f       	add	r30, r30
     628:	ff 1f       	adc	r31, r31
     62a:	e0 57       	subi	r30, 0x70	; 112
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	11 82       	std	Z+1, r1	; 0x01
     630:	10 82       	st	Z, r1
    f_excessCurrent=1;
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	20 93 87 00 	sts	0x0087, r18
    f_excessCurrentCache=1;
     638:	20 93 86 00 	sts	0x0086, r18
     63c:	12 c0       	rjmp	.+36     	; 0x662 <_Z14TestMaxCurrentcj+0x6a>
   }
  else countTimeMaxCurrent0[n]++;
     63e:	9c 01       	movw	r18, r24
     640:	22 0f       	add	r18, r18
     642:	33 1f       	adc	r19, r19
     644:	20 57       	subi	r18, 0x70	; 112
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	4f 5f       	subi	r20, 0xFF	; 255
     64a:	5f 4f       	sbci	r21, 0xFF	; 255
     64c:	f9 01       	movw	r30, r18
     64e:	51 83       	std	Z+1, r21	; 0x01
     650:	40 83       	st	Z, r20
     652:	07 c0       	rjmp	.+14     	; 0x662 <_Z14TestMaxCurrentcj+0x6a>
 else countTimeMaxCurrent0[n]=0;
     654:	fc 01       	movw	r30, r24
     656:	ee 0f       	add	r30, r30
     658:	ff 1f       	adc	r31, r31
     65a:	e0 57       	subi	r30, 0x70	; 112
     65c:	ff 4f       	sbci	r31, 0xFF	; 255
     65e:	11 82       	std	Z+1, r1	; 0x01
     660:	10 82       	st	Z, r1

 if (t>MaxCurrent1[n])
     662:	fc 01       	movw	r30, r24
     664:	ee 0f       	add	r30, r30
     666:	ff 1f       	adc	r31, r31
     668:	e4 57       	subi	r30, 0x74	; 116
     66a:	ff 4f       	sbci	r31, 0xFF	; 255
     66c:	20 81       	ld	r18, Z
     66e:	31 81       	ldd	r19, Z+1	; 0x01
     670:	26 17       	cp	r18, r22
     672:	37 07       	cpc	r19, r23
     674:	08 f5       	brcc	.+66     	; 0x6b8 <_Z14TestMaxCurrentcj+0xc0>
  if (countTimeMaxCurrent1[n]==const_countTimeMaxCurrent1)
     676:	fc 01       	movw	r30, r24
     678:	ee 0f       	add	r30, r30
     67a:	ff 1f       	adc	r31, r31
     67c:	e8 57       	subi	r30, 0x78	; 120
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	20 81       	ld	r18, Z
     682:	31 81       	ldd	r19, Z+1	; 0x01
     684:	28 3c       	cpi	r18, 0xC8	; 200
     686:	31 05       	cpc	r19, r1
     688:	69 f4       	brne	.+26     	; 0x6a4 <_Z14TestMaxCurrentcj+0xac>
   {
    countTimeMaxCurrent1[n]=0;
     68a:	fc 01       	movw	r30, r24
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e8 57       	subi	r30, 0x78	; 120
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	11 82       	std	Z+1, r1	; 0x01
     696:	10 82       	st	Z, r1
    f_excessCurrent=1;
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 87 00 	sts	0x0087, r24
    f_excessCurrentCache=1;
     69e:	80 93 86 00 	sts	0x0086, r24
     6a2:	08 95       	ret
   }
  else countTimeMaxCurrent1[n]++;
     6a4:	fc 01       	movw	r30, r24
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	e8 57       	subi	r30, 0x78	; 120
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	2f 5f       	subi	r18, 0xFF	; 255
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	31 83       	std	Z+1, r19	; 0x01
     6b4:	20 83       	st	Z, r18
     6b6:	08 95       	ret
 else countTimeMaxCurrent1[n]=0;
     6b8:	fc 01       	movw	r30, r24
     6ba:	ee 0f       	add	r30, r30
     6bc:	ff 1f       	adc	r31, r31
     6be:	e8 57       	subi	r30, 0x78	; 120
     6c0:	ff 4f       	sbci	r31, 0xFF	; 255
     6c2:	11 82       	std	Z+1, r1	; 0x01
     6c4:	10 82       	st	Z, r1
     6c6:	08 95       	ret

000006c8 <_Z11ADCCurrent1v>:
}

void ADCCurrent1(void)
{
 int temp;
 temp=0;temp=ADCL;temp|=ADCH << 8;
     6c8:	24 b1       	in	r18, 0x04	; 4
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	45 b1       	in	r20, 0x05	; 5
     6ce:	94 2f       	mov	r25, r20
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	82 2b       	or	r24, r18
     6d4:	93 2b       	or	r25, r19
 temp*=10;temp/=27;
     6d6:	ac 01       	movw	r20, r24
     6d8:	44 0f       	add	r20, r20
     6da:	55 1f       	adc	r21, r21
     6dc:	9c 01       	movw	r18, r24
     6de:	22 0f       	add	r18, r18
     6e0:	33 1f       	adc	r19, r19
     6e2:	22 0f       	add	r18, r18
     6e4:	33 1f       	adc	r19, r19
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	ca 01       	movw	r24, r20
     6ec:	82 0f       	add	r24, r18
     6ee:	93 1f       	adc	r25, r19
     6f0:	6b e1       	ldi	r22, 0x1B	; 27
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	cc d5       	rcall	.+2968   	; 0x128e <__divmodhi4>
 current[1]=temp;
     6f6:	60 93 9c 00 	sts	0x009C, r22
     6fa:	70 93 9d 00 	sts	0x009D, r23
 TestMaxCurrent(1,temp);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	7b df       	rcall	.-266    	; 0x5f8 <_Z14TestMaxCurrentcj>
}
     702:	08 95       	ret

00000704 <_Z11ADCCurrent0v>:
}

void ADCCurrent0(void)
{
 int temp;
 temp=0;temp=ADCL;temp|=ADCH << 8;
     704:	24 b1       	in	r18, 0x04	; 4
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	45 b1       	in	r20, 0x05	; 5
     70a:	94 2f       	mov	r25, r20
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	82 2b       	or	r24, r18
     710:	93 2b       	or	r25, r19
 temp*=10;temp/=27;
     712:	ac 01       	movw	r20, r24
     714:	44 0f       	add	r20, r20
     716:	55 1f       	adc	r21, r21
     718:	9c 01       	movw	r18, r24
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	22 0f       	add	r18, r18
     724:	33 1f       	adc	r19, r19
     726:	ca 01       	movw	r24, r20
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	6b e1       	ldi	r22, 0x1B	; 27
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	ae d5       	rcall	.+2908   	; 0x128e <__divmodhi4>
 current[0]=temp;
     732:	60 93 9a 00 	sts	0x009A, r22
     736:	70 93 9b 00 	sts	0x009B, r23
 TestMaxCurrent(0,temp);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	5d df       	rcall	.-326    	; 0x5f8 <_Z14TestMaxCurrentcj>
}
     73e:	08 95       	ret

00000740 <_Z16CalculateVoltagej>:
 else countTimeMaxCurrent1[n]=0;
}

void CalculateVoltage(unsigned int t)
{
 voltage=t;
     740:	90 93 99 00 	sts	0x0099, r25
     744:	80 93 98 00 	sts	0x0098, r24
}
     748:	08 95       	ret

0000074a <_Z10ADCVoltagev>:
}

void ADCVoltage(void)
{
 int temp;
 temp=0;temp=ADCL;temp|=ADCH << 8;temp/=2;
     74a:	24 b1       	in	r18, 0x04	; 4
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	45 b1       	in	r20, 0x05	; 5
     750:	94 2f       	mov	r25, r20
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	82 2b       	or	r24, r18
     756:	93 2b       	or	r25, r19
     758:	99 23       	and	r25, r25
     75a:	0c f4       	brge	.+2      	; 0x75e <_Z10ADCVoltagev+0x14>
     75c:	01 96       	adiw	r24, 0x01	; 1
 CalculateVoltage(temp);
     75e:	95 95       	asr	r25
     760:	87 95       	ror	r24
     762:	ee df       	rcall	.-36     	; 0x740 <_Z16CalculateVoltagej>
}
     764:	08 95       	ret

00000766 <_Z20Clearf_excessCurrentv>:

void Clearf_excessCurrent(void)
{
  f_excessCurrent=0;
     766:	10 92 87 00 	sts	0x0087, r1
}
     76a:	08 95       	ret

0000076c <_Z12LampTimeFuncv>:
#endif  
}

void LampTimeFunc(void)
{
 if (lPeriod<lState[0]) {Lamp0_on;}
     76c:	20 91 a3 00 	lds	r18, 0x00A3
     770:	30 91 a4 00 	lds	r19, 0x00A4
     774:	80 91 a7 00 	lds	r24, 0x00A7
     778:	90 91 a8 00 	lds	r25, 0x00A8
     77c:	82 17       	cp	r24, r18
     77e:	93 07       	cpc	r25, r19
     780:	10 f4       	brcc	.+4      	; 0x786 <_Z12LampTimeFuncv+0x1a>
     782:	96 9a       	sbi	0x12, 6	; 18
     784:	04 c0       	rjmp	.+8      	; 0x78e <_Z12LampTimeFuncv+0x22>
 else if (lPeriod>lState[0]) {Lamp0_off;}
     786:	28 17       	cp	r18, r24
     788:	39 07       	cpc	r19, r25
     78a:	08 f4       	brcc	.+2      	; 0x78e <_Z12LampTimeFuncv+0x22>
     78c:	96 98       	cbi	0x12, 6	; 18
 if (lPeriod<lState[1]) {Lamp1_on;}
     78e:	20 91 a5 00 	lds	r18, 0x00A5
     792:	30 91 a6 00 	lds	r19, 0x00A6
     796:	80 91 a7 00 	lds	r24, 0x00A7
     79a:	90 91 a8 00 	lds	r25, 0x00A8
     79e:	82 17       	cp	r24, r18
     7a0:	93 07       	cpc	r25, r19
     7a2:	10 f4       	brcc	.+4      	; 0x7a8 <_Z12LampTimeFuncv+0x3c>
     7a4:	95 9a       	sbi	0x12, 5	; 18
     7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <_Z12LampTimeFuncv+0x44>
 else if (lPeriod>lState[1]) {Lamp1_off;}
     7a8:	28 17       	cp	r18, r24
     7aa:	39 07       	cpc	r19, r25
     7ac:	08 f4       	brcc	.+2      	; 0x7b0 <_Z12LampTimeFuncv+0x44>
     7ae:	95 98       	cbi	0x12, 5	; 18
 if (lPeriod++==periodLampFlash)  {lPeriod=0;}
     7b0:	80 91 a7 00 	lds	r24, 0x00A7
     7b4:	90 91 a8 00 	lds	r25, 0x00A8
     7b8:	9c 01       	movw	r18, r24
     7ba:	2f 5f       	subi	r18, 0xFF	; 255
     7bc:	3f 4f       	sbci	r19, 0xFF	; 255
     7be:	30 93 a8 00 	sts	0x00A8, r19
     7c2:	20 93 a7 00 	sts	0x00A7, r18
     7c6:	8a 3f       	cpi	r24, 0xFA	; 250
     7c8:	91 05       	cpc	r25, r1
     7ca:	21 f4       	brne	.+8      	; 0x7d4 <_Z12LampTimeFuncv+0x68>
     7cc:	10 92 a8 00 	sts	0x00A8, r1
     7d0:	10 92 a7 00 	sts	0x00A7, r1
     7d4:	08 95       	ret

000007d6 <_Z8InitLAMPv>:
unsigned int lPeriod;
unsigned int lState[2]; // 0 - no light, 1 - light, 2 - flash

void InitLAMP(void)
{
 DDRD|=0x60;
     7d6:	81 b3       	in	r24, 0x11	; 17
     7d8:	80 66       	ori	r24, 0x60	; 96
     7da:	81 bb       	out	0x11, r24	; 17
 PORTD&=0x9f;
     7dc:	82 b3       	in	r24, 0x12	; 18
     7de:	8f 79       	andi	r24, 0x9F	; 159
     7e0:	82 bb       	out	0x12, r24	; 18
 RegVirtualTimer(&LampTimeFunc);
     7e2:	86 eb       	ldi	r24, 0xB6	; 182
     7e4:	93 e0       	ldi	r25, 0x03	; 3
     7e6:	3a d4       	rcall	.+2164   	; 0x105c <_Z15RegVirtualTimerPFvvE>
 lState[0]=0;lState[1]=0;
     7e8:	10 92 a4 00 	sts	0x00A4, r1
     7ec:	10 92 a3 00 	sts	0x00A3, r1
     7f0:	10 92 a6 00 	sts	0x00A6, r1
     7f4:	10 92 a5 00 	sts	0x00A5, r1
 lPeriod=0;
     7f8:	10 92 a8 00 	sts	0x00A8, r1
     7fc:	10 92 a7 00 	sts	0x00A7, r1
}
     800:	08 95       	ret

00000802 <_Z7SetLamphh>:
    case 0: lState[lamp]=0;break;
    case 1: lState[lamp]=periodLampFlash;break;
    case 2: lState[lamp]=periodLampFlash/2;break;
  }
#endif  
}
     802:	08 95       	ret

00000804 <_ZN7Network8portInitEv>:
//	debugOutTimer();
	Network::receiverSyncTimer();
}

void Network::portInit(){
	DDRC |= 0x20;
     804:	a5 9a       	sbi	0x14, 5	; 20
	PORTC &= 0xdf;
     806:	ad 98       	cbi	0x15, 5	; 21
}
     808:	08 95       	ret

0000080a <_ZN7Network10portToSendEv>:
	
void Network::portToSend(){
	PORTC |= 0x20;
     80a:	ad 9a       	sbi	0x15, 5	; 21
}
     80c:	08 95       	ret

0000080e <_ZN7Network9portToRecEv>:
	
void Network::portToRec(){
	PORTC &= 0xdf;
     80e:	ad 98       	cbi	0x15, 5	; 21
}
     810:	08 95       	ret

00000812 <_ZN7Network10getAddressEv>:

ISR(USART_RXC_vect){
	Network::recv();
}

unsigned char Network::getAddress(){
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
	DDRB &= 0xc7;
     816:	87 b3       	in	r24, 0x17	; 23
     818:	87 7c       	andi	r24, 0xC7	; 199
     81a:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0x38;
     81c:	88 b3       	in	r24, 0x18	; 24
     81e:	88 63       	ori	r24, 0x38	; 56
     820:	88 bb       	out	0x18, r24	; 24
	DDRD &= 0xe3;
     822:	81 b3       	in	r24, 0x11	; 17
     824:	83 7e       	andi	r24, 0xE3	; 227
     826:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x1c;
     828:	82 b3       	in	r24, 0x12	; 18
     82a:	8c 61       	ori	r24, 0x1C	; 28
     82c:	82 bb       	out	0x12, r24	; 18
	
	delay_mks_10(10);
     82e:	8a e0       	ldi	r24, 0x0A	; 10
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	ce d4       	rcall	.+2460   	; 0x11d0 <_Z12delay_mks_10i>
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
     834:	20 b3       	in	r18, 0x10	; 16
	_address |= (((~PIND) & (1 << 3)) >> 1);
     836:	a0 b3       	in	r26, 0x10	; 16
	_address |= (((~PIND) & (1 << 4)) >> 1);
     838:	e0 b3       	in	r30, 0x10	; 16
	_address |= (((~PINB) & (1 << 3)) >> 3);
     83a:	c6 b3       	in	r28, 0x16	; 22
	_address |= (((~PINB) & (1 << 5)) >> 1);
     83c:	66 b3       	in	r22, 0x16	; 22
	_address |= (((~PINB) & (1 << 4)) << 1);	
     83e:	96 b3       	in	r25, 0x16	; 22
	
	delay_mks_10(10);
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
	_address |= (((~PIND) & (1 << 3)) >> 1);
	_address |= (((~PIND) & (1 << 4)) >> 1);
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	e0 95       	com	r30
     844:	f0 95       	com	r31
     846:	e0 71       	andi	r30, 0x10	; 16
     848:	f0 70       	andi	r31, 0x00	; 0
     84a:	f5 95       	asr	r31
     84c:	e7 95       	ror	r30
	PORTD |= 0x1c;
	
	delay_mks_10(10);
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
	_address |= (((~PIND) & (1 << 3)) >> 1);
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	a0 95       	com	r26
     852:	b0 95       	com	r27
     854:	a8 70       	andi	r26, 0x08	; 8
     856:	b0 70       	andi	r27, 0x00	; 0
     858:	b5 95       	asr	r27
     85a:	a7 95       	ror	r26
     85c:	ea 2b       	or	r30, r26
	_address |= (((~PIND) & (1 << 4)) >> 1);
	_address |= (((~PINB) & (1 << 3)) >> 3);
     85e:	d0 e0       	ldi	r29, 0x00	; 0
     860:	c0 95       	com	r28
     862:	d0 95       	com	r29
     864:	c8 70       	andi	r28, 0x08	; 8
     866:	d0 70       	andi	r29, 0x00	; 0
     868:	de 01       	movw	r26, r28
     86a:	b5 95       	asr	r27
     86c:	a7 95       	ror	r26
     86e:	b5 95       	asr	r27
     870:	a7 95       	ror	r26
     872:	b5 95       	asr	r27
     874:	a7 95       	ror	r26
	
	delay_mks_10(10);
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
	_address |= (((~PIND) & (1 << 3)) >> 1);
	_address |= (((~PIND) & (1 << 4)) >> 1);
     876:	ae 2b       	or	r26, r30
	_address |= (((~PINB) & (1 << 3)) >> 3);
	_address |= (((~PINB) & (1 << 5)) >> 1);
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	60 95       	com	r22
     87c:	70 95       	com	r23
     87e:	60 72       	andi	r22, 0x20	; 32
     880:	70 70       	andi	r23, 0x00	; 0
     882:	ab 01       	movw	r20, r22
     884:	55 95       	asr	r21
     886:	47 95       	ror	r20
	delay_mks_10(10);
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
	_address |= (((~PIND) & (1 << 3)) >> 1);
	_address |= (((~PIND) & (1 << 4)) >> 1);
	_address |= (((~PINB) & (1 << 3)) >> 3);
     888:	a4 2b       	or	r26, r20
	_address |= (((~PINB) & (1 << 5)) >> 1);
	_address |= (((~PINB) & (1 << 4)) << 1);	
     88a:	49 2f       	mov	r20, r25
     88c:	50 e0       	ldi	r21, 0x00	; 0
     88e:	40 95       	com	r20
     890:	50 95       	com	r21
     892:	40 71       	andi	r20, 0x10	; 16
     894:	50 70       	andi	r21, 0x00	; 0
     896:	ca 01       	movw	r24, r20
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
	_address |= (((~PIND) & (1 << 3)) >> 1);
	_address |= (((~PIND) & (1 << 4)) >> 1);
	_address |= (((~PINB) & (1 << 3)) >> 3);
	_address |= (((~PINB) & (1 << 5)) >> 1);
     89c:	8a 2b       	or	r24, r26
	DDRD &= 0xe3;
	PORTD |= 0x1c;
	
	delay_mks_10(10);
	
	unsigned char _address = ((~PIND) & (1 << 2)) >> 1;
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	20 95       	com	r18
     8a2:	30 95       	com	r19
     8a4:	24 70       	andi	r18, 0x04	; 4
     8a6:	30 70       	andi	r19, 0x00	; 0
     8a8:	35 95       	asr	r19
     8aa:	27 95       	ror	r18
	_address |= (((~PINB) & (1 << 3)) >> 3);
	_address |= (((~PINB) & (1 << 5)) >> 1);
	_address |= (((~PINB) & (1 << 4)) << 1);	

 	return _address;
}
     8ac:	82 2b       	or	r24, r18
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <_ZN7Network10initSenderEv>:
	portToRec();		
	RegVirtualTimer(&networkTimerFunc);
}

void Network::initSender(){
	sendBufferPos = 0;
     8b4:	10 92 c5 00 	sts	0x00C5, r1
     8b8:	10 92 c4 00 	sts	0x00C4, r1
     8bc:	e6 ec       	ldi	r30, 0xC6	; 198
     8be:	f0 e0       	ldi	r31, 0x00	; 0
	initReceiver();
	portToRec();		
	RegVirtualTimer(&networkTimerFunc);
}

void Network::initSender(){
     8c0:	cf 01       	movw	r24, r30
     8c2:	44 96       	adiw	r24, 0x14	; 20
	sendBufferPos = 0;
	for(unsigned int i = 0; i < BUFFER_SIZE; ++i){
		sendBuffer[i] = 0;
     8c4:	11 92       	st	Z+, r1
	RegVirtualTimer(&networkTimerFunc);
}

void Network::initSender(){
	sendBufferPos = 0;
	for(unsigned int i = 0; i < BUFFER_SIZE; ++i){
     8c6:	e8 17       	cp	r30, r24
     8c8:	f9 07       	cpc	r31, r25
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <_ZN7Network10initSenderEv+0x10>
		sendBuffer[i] = 0;
	}
}
     8cc:	08 95       	ret

000008ce <_ZN7Network6getCrcEPhj>:
}

unsigned char Network::getCrc(unsigned char* data, unsigned int size){
	unsigned char crc = 0;
	
	for(unsigned int i = 0; i < size; ++i){
     8ce:	61 15       	cp	r22, r1
     8d0:	71 05       	cpc	r23, r1
     8d2:	69 f0       	breq	.+26     	; 0x8ee <_ZN7Network6getCrcEPhj+0x20>
     8d4:	e8 2f       	mov	r30, r24
     8d6:	f9 2f       	mov	r31, r25
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
	sendBufferPos = 0;
	UDR = sendBuffer[0];
}

unsigned char Network::getCrc(unsigned char* data, unsigned int size){
	unsigned char crc = 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
	
	for(unsigned int i = 0; i < size; ++i){
		crc += data[i];
     8de:	91 91       	ld	r25, Z+
     8e0:	89 0f       	add	r24, r25
}

unsigned char Network::getCrc(unsigned char* data, unsigned int size){
	unsigned char crc = 0;
	
	for(unsigned int i = 0; i < size; ++i){
     8e2:	2f 5f       	subi	r18, 0xFF	; 255
     8e4:	3f 4f       	sbci	r19, 0xFF	; 255
     8e6:	26 17       	cp	r18, r22
     8e8:	37 07       	cpc	r19, r23
     8ea:	c9 f7       	brne	.-14     	; 0x8de <_ZN7Network6getCrcEPhj+0x10>
     8ec:	08 95       	ret
	sendBufferPos = 0;
	UDR = sendBuffer[0];
}

unsigned char Network::getCrc(unsigned char* data, unsigned int size){
	unsigned char crc = 0;
     8ee:	80 e0       	ldi	r24, 0x00	; 0
	for(unsigned int i = 0; i < size; ++i){
		crc += data[i];
	}	
	
	return crc;
}
     8f0:	08 95       	ret

000008f2 <_ZN7Network12setSendFrameEccccz>:
		UCSRB &= ~((1 << TXCIE) | (1 << TXEN));
		initReceiver();
	}
}

void Network::setSendFrame(char dstAddress, char srcAddress, char command, char paramsCount, ...){
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
     902:	2c 85       	ldd	r18, Y+12	; 0x0c
	va_list funcParams;
	va_start(funcParams, paramsCount);
     904:	ce 01       	movw	r24, r28
     906:	0d 96       	adiw	r24, 0x0d	; 13
	sendBuffer[0] = dstAddress;
     908:	39 85       	ldd	r19, Y+9	; 0x09
     90a:	30 93 c6 00 	sts	0x00C6, r19
	sendBuffer[1] = srcAddress;
     90e:	3a 85       	ldd	r19, Y+10	; 0x0a
     910:	30 93 c7 00 	sts	0x00C7, r19
	sendBuffer[2] = command;
     914:	3b 85       	ldd	r19, Y+11	; 0x0b
     916:	30 93 c8 00 	sts	0x00C8, r19
	sendBuffer[3] = paramsCount;
     91a:	20 93 c9 00 	sts	0x00C9, r18
	for(unsigned i = 4; i < 4 + paramsCount; ++i){
     91e:	02 2f       	mov	r16, r18
     920:	10 e0       	ldi	r17, 0x00	; 0
     922:	ee 24       	eor	r14, r14
     924:	ff 24       	eor	r15, r15
     926:	68 94       	set
     928:	e2 f8       	bld	r14, 2
     92a:	e0 0e       	add	r14, r16
     92c:	f1 1e       	adc	r15, r17
     92e:	35 e0       	ldi	r19, 0x05	; 5
     930:	e3 16       	cp	r14, r19
     932:	f1 04       	cpc	r15, r1
     934:	68 f0       	brcs	.+26     	; 0x950 <_ZN7Network12setSendFrameEccccz+0x5e>
     936:	aa ec       	ldi	r26, 0xCA	; 202
     938:	b0 e0       	ldi	r27, 0x00	; 0
		UCSRB &= ~((1 << TXCIE) | (1 << TXEN));
		initReceiver();
	}
}

void Network::setSendFrame(char dstAddress, char srcAddress, char command, char paramsCount, ...){
     93a:	ad 01       	movw	r20, r26
     93c:	42 0f       	add	r20, r18
     93e:	51 1d       	adc	r21, r1
     940:	9a 01       	movw	r18, r20
	sendBuffer[0] = dstAddress;
	sendBuffer[1] = srcAddress;
	sendBuffer[2] = command;
	sendBuffer[3] = paramsCount;
	for(unsigned i = 4; i < 4 + paramsCount; ++i){
		sendBuffer[i] = va_arg(funcParams, int);
     942:	fc 01       	movw	r30, r24
     944:	02 96       	adiw	r24, 0x02	; 2
     946:	40 81       	ld	r20, Z
     948:	4d 93       	st	X+, r20
	va_start(funcParams, paramsCount);
	sendBuffer[0] = dstAddress;
	sendBuffer[1] = srcAddress;
	sendBuffer[2] = command;
	sendBuffer[3] = paramsCount;
	for(unsigned i = 4; i < 4 + paramsCount; ++i){
     94a:	a2 17       	cp	r26, r18
     94c:	b3 07       	cpc	r27, r19
     94e:	c9 f7       	brne	.-14     	; 0x942 <_ZN7Network12setSendFrameEccccz+0x50>
		sendBuffer[i] = va_arg(funcParams, int);
	}
	
	va_end(funcParams);
	
	sendBuffer[4 + paramsCount] = getCrc(sendBuffer, 4 + paramsCount);
     950:	06 ec       	ldi	r16, 0xC6	; 198
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	c8 01       	movw	r24, r16
     956:	b7 01       	movw	r22, r14
     958:	ba df       	rcall	.-140    	; 0x8ce <_ZN7Network6getCrcEPhj>
     95a:	0e 0d       	add	r16, r14
     95c:	1f 1d       	adc	r17, r15
     95e:	f8 01       	movw	r30, r16
     960:	80 83       	st	Z, r24
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	1f 91       	pop	r17
     968:	0f 91       	pop	r16
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	08 95       	ret

00000970 <_ZN7Network12initReceiverEv>:
	
	return crc;
}

void Network::initReceiver(){
	recvBufferPos = 0;
     970:	10 92 af 00 	sts	0x00AF, r1
     974:	10 92 ae 00 	sts	0x00AE, r1
     978:	e0 eb       	ldi	r30, 0xB0	; 176
     97a:	f0 e0       	ldi	r31, 0x00	; 0
	}	
	
	return crc;
}

void Network::initReceiver(){
     97c:	cf 01       	movw	r24, r30
     97e:	44 96       	adiw	r24, 0x14	; 20
	recvBufferPos = 0;
	for(unsigned int i = 0; i < BUFFER_SIZE; ++i){
		recvBuffer[i] = 0;
     980:	11 92       	st	Z+, r1
	return crc;
}

void Network::initReceiver(){
	recvBufferPos = 0;
	for(unsigned int i = 0; i < BUFFER_SIZE; ++i){
     982:	e8 17       	cp	r30, r24
     984:	f9 07       	cpc	r31, r25
     986:	e1 f7       	brne	.-8      	; 0x980 <_ZN7Network12initReceiverEv+0x10>
		recvBuffer[i] = 0;
	}
	
	fSync = false;
     988:	10 92 ad 00 	sts	0x00AD, r1
	syncCounter = 0;
     98c:	10 92 ac 00 	sts	0x00AC, r1
     990:	10 92 ab 00 	sts	0x00AB, r1
	
	UCSRA |= (1 << RXC);
     994:	5f 9a       	sbi	0x0b, 7	; 11
	UCSRB |= ((1 << RXCIE) | (1 << RXEN));
     996:	8a b1       	in	r24, 0x0a	; 10
     998:	80 69       	ori	r24, 0x90	; 144
     99a:	8a b9       	out	0x0a, r24	; 10
}
     99c:	08 95       	ret

0000099e <_ZN7Network4sendEv>:
		sendBuffer[i] = 0;
	}
}

void Network::send(){
	if(++sendBufferPos < sendBuffer[PARAMS_COUNT_OFFSET] + 5)
     99e:	80 91 c4 00 	lds	r24, 0x00C4
     9a2:	90 91 c5 00 	lds	r25, 0x00C5
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	90 93 c5 00 	sts	0x00C5, r25
     9ac:	80 93 c4 00 	sts	0x00C4, r24
     9b0:	20 91 c9 00 	lds	r18, 0x00C9
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	2b 5f       	subi	r18, 0xFB	; 251
     9b8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ba:	82 17       	cp	r24, r18
     9bc:	93 07       	cpc	r25, r19
     9be:	30 f4       	brcc	.+12     	; 0x9cc <_ZN7Network4sendEv+0x2e>
		UDR = sendBuffer[sendBufferPos];
     9c0:	8a 53       	subi	r24, 0x3A	; 58
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	fc 01       	movw	r30, r24
     9c6:	80 81       	ld	r24, Z
     9c8:	8c b9       	out	0x0c, r24	; 12
     9ca:	08 95       	ret
	else{
		portToRec();
     9cc:	20 df       	rcall	.-448    	; 0x80e <_ZN7Network9portToRecEv>
		UCSRB &= ~((1 << TXCIE) | (1 << TXEN));
     9ce:	8a b1       	in	r24, 0x0a	; 10
     9d0:	87 7b       	andi	r24, 0xB7	; 183
     9d2:	8a b9       	out	0x0a, r24	; 10
		initReceiver();
     9d4:	cd df       	rcall	.-102    	; 0x970 <_ZN7Network12initReceiverEv>
     9d6:	08 95       	ret

000009d8 <__vector_13>:
	
void Network::portToRec(){
	PORTC &= 0xdf;
}

ISR(USART_TXC_vect){
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	2f 93       	push	r18
     9e4:	3f 93       	push	r19
     9e6:	4f 93       	push	r20
     9e8:	5f 93       	push	r21
     9ea:	6f 93       	push	r22
     9ec:	7f 93       	push	r23
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
     9f6:	ef 93       	push	r30
     9f8:	ff 93       	push	r31
	Network::send();
     9fa:	d1 df       	rcall	.-94     	; 0x99e <_ZN7Network4sendEv>
}
     9fc:	ff 91       	pop	r31
     9fe:	ef 91       	pop	r30
     a00:	bf 91       	pop	r27
     a02:	af 91       	pop	r26
     a04:	9f 91       	pop	r25
     a06:	8f 91       	pop	r24
     a08:	7f 91       	pop	r23
     a0a:	6f 91       	pop	r22
     a0c:	5f 91       	pop	r21
     a0e:	4f 91       	pop	r20
     a10:	3f 91       	pop	r19
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <_ZN7Network4initEv>:
 	return _address;
}

unsigned char testAddress;
void Network::init(){
	portInit();
     a1e:	f2 de       	rcall	.-540    	; 0x804 <_ZN7Network8portInitEv>
	
	address = getAddress();
     a20:	f8 de       	rcall	.-528    	; 0x812 <_ZN7Network10getAddressEv>
     a22:	80 93 aa 00 	sts	0x00AA, r24
		
	UBRRH = BAUD_RATE_H;
     a26:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_RATE_L;
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	89 b9       	out	0x09, r24	; 9
	
	UCSRC = ((1 << URSEL) | (1 << UCSZ1) |  (1 << UCSZ0));
     a2c:	86 e8       	ldi	r24, 0x86	; 134
     a2e:	80 bd       	out	0x20, r24	; 32
	
	initSender();
     a30:	41 df       	rcall	.-382    	; 0x8b4 <_ZN7Network10initSenderEv>
	initReceiver();
     a32:	9e df       	rcall	.-196    	; 0x970 <_ZN7Network12initReceiverEv>
	portToRec();		
     a34:	ec de       	rcall	.-552    	; 0x80e <_ZN7Network9portToRecEv>
	RegVirtualTimer(&networkTimerFunc);
     a36:	8a e4       	ldi	r24, 0x4A	; 74
     a38:	95 e0       	ldi	r25, 0x05	; 5
     a3a:	10 d3       	rcall	.+1568   	; 0x105c <_Z15RegVirtualTimerPFvvE>
}
     a3c:	08 95       	ret

00000a3e <_ZN7Network12stopReceiverEv>:
	UCSRA |= (1 << RXC);
	UCSRB |= ((1 << RXCIE) | (1 << RXEN));
}

void Network::stopReceiver(){
	UCSRB &= ~((1 << RXCIE) | (1 << RXEN));
     a3e:	8a b1       	in	r24, 0x0a	; 10
     a40:	8f 76       	andi	r24, 0x6F	; 111
     a42:	8a b9       	out	0x0a, r24	; 10
}	
     a44:	08 95       	ret

00000a46 <_ZN7Network9startSendEv>:
	
	sendBuffer[4 + paramsCount] = getCrc(sendBuffer, 4 + paramsCount);
}

void Network::startSend(){
	stopReceiver();
     a46:	fb df       	rcall	.-10     	; 0xa3e <_ZN7Network12stopReceiverEv>
	portToSend();
     a48:	e0 de       	rcall	.-576    	; 0x80a <_ZN7Network10portToSendEv>
	
	UCSRA |= (1 << TXC);
     a4a:	5e 9a       	sbi	0x0b, 6	; 11
	UCSRB |= ((1 << TXCIE) | (1 << TXEN));
     a4c:	8a b1       	in	r24, 0x0a	; 10
     a4e:	88 64       	ori	r24, 0x48	; 72
     a50:	8a b9       	out	0x0a, r24	; 10
	
	delay_mks_10(10);
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	bc d3       	rcall	.+1912   	; 0x11d0 <_Z12delay_mks_10i>
	sendBufferPos = 0;
     a58:	10 92 c5 00 	sts	0x00C5, r1
     a5c:	10 92 c4 00 	sts	0x00C4, r1
	UDR = sendBuffer[0];
     a60:	80 91 c6 00 	lds	r24, 0x00C6
     a64:	8c b9       	out	0x0c, r24	; 12
}
     a66:	08 95       	ret

00000a68 <_ZN7Network16clearSyncCounterEv>:
void Network::stopReceiver(){
	UCSRB &= ~((1 << RXCIE) | (1 << RXEN));
}	
	
void Network::clearSyncCounter(){
	syncCounter = 0;
     a68:	10 92 ac 00 	sts	0x00AC, r1
     a6c:	10 92 ab 00 	sts	0x00AB, r1
}
     a70:	08 95       	ret

00000a72 <_ZN7Network17receiverSyncTimerEv>:

void Network::receiverSyncTimer(){
	if(++syncCounter >= SYNC_COUNTER_MAX){
     a72:	80 91 ab 00 	lds	r24, 0x00AB
     a76:	90 91 ac 00 	lds	r25, 0x00AC
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	90 93 ac 00 	sts	0x00AC, r25
     a80:	80 93 ab 00 	sts	0x00AB, r24
     a84:	85 30       	cpi	r24, 0x05	; 5
     a86:	91 05       	cpc	r25, r1
     a88:	24 f0       	brlt	.+8      	; 0xa92 <_ZN7Network17receiverSyncTimerEv+0x20>
		fSync = true;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	80 93 ad 00 	sts	0x00AD, r24
		clearSyncCounter();
     a90:	eb df       	rcall	.-42     	; 0xa68 <_ZN7Network16clearSyncCounterEv>
     a92:	08 95       	ret

00000a94 <_Z16networkTimerFuncv>:

unsigned char Network::address;

void networkTimerFunc(){
//	debugOutTimer();
	Network::receiverSyncTimer();
     a94:	ee df       	rcall	.-36     	; 0xa72 <_ZN7Network17receiverSyncTimerEv>
}
     a96:	08 95       	ret

00000a98 <_ZN7Network15testParamsCountEv>:
			++recvBufferPos;
	}	
}

bool Network::testParamsCount(){
	return recvBuffer[PARAMS_COUNT_OFFSET] <= 15;
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 91 b3 00 	lds	r25, 0x00B3
     a9e:	90 31       	cpi	r25, 0x10	; 16
     aa0:	08 f0       	brcs	.+2      	; 0xaa4 <_ZN7Network15testParamsCountEv+0xc>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
}
     aa4:	08 95       	ret

00000aa6 <_ZN7Network8testRecvEv>:

bool Network::testRecv(){	
     aa6:	cf 93       	push	r28
	bool result = true;
	
	if (recvBuffer[DST_ADDRESS_OFFSET] != address)
     aa8:	90 91 b0 00 	lds	r25, 0x00B0
     aac:	80 91 aa 00 	lds	r24, 0x00AA
     ab0:	98 17       	cp	r25, r24
     ab2:	b1 f4       	brne	.+44     	; 0xae0 <_ZN7Network8testRecvEv+0x3a>
		return true;
	
	switch(recvBuffer[COMMAND_OFFSET]){
     ab4:	80 91 b2 00 	lds	r24, 0x00B2
     ab8:	89 30       	cpi	r24, 0x09	; 9
     aba:	38 f0       	brcs	.+14     	; 0xaca <_ZN7Network8testRecvEv+0x24>
     abc:	8c 30       	cpi	r24, 0x0C	; 12
     abe:	18 f0       	brcs	.+6      	; 0xac6 <_ZN7Network8testRecvEv+0x20>
     ac0:	8e 59       	subi	r24, 0x9E	; 158
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	10 f4       	brcc	.+4      	; 0xaca <_ZN7Network8testRecvEv+0x24>
bool Network::testParamsCount(){
	return recvBuffer[PARAMS_COUNT_OFFSET] <= 15;
}

bool Network::testRecv(){	
	bool result = true;
     ac6:	c1 e0       	ldi	r28, 0x01	; 1
     ac8:	01 c0       	rjmp	.+2      	; 0xacc <_ZN7Network8testRecvEv+0x26>
		case 11:
		case 158:
		case 159:
			break;
		default:
			result = false;
     aca:	c0 e0       	ldi	r28, 0x00	; 0
			//setDebugVal(3);
			break;
	}

	if (!testParamsCount()){
     acc:	e5 df       	rcall	.-54     	; 0xa98 <_ZN7Network15testParamsCountEv>
     ace:	88 23       	and	r24, r24
     ad0:	09 f4       	brne	.+2      	; 0xad4 <_ZN7Network8testRecvEv+0x2e>
		result = false;
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
		//setDebugVal(4);
	}		
		
	switch(recvBuffer[SRC_ADDRESS_OFFSET]){
     ad4:	80 91 b1 00 	lds	r24, 0x00B1
     ad8:	82 52       	subi	r24, 0x22	; 34
     ada:	88 30       	cpi	r24, 0x08	; 8
     adc:	18 f4       	brcc	.+6      	; 0xae4 <_ZN7Network8testRecvEv+0x3e>
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <_ZN7Network8testRecvEv+0x40>

bool Network::testRecv(){	
	bool result = true;
	
	if (recvBuffer[DST_ADDRESS_OFFSET] != address)
		return true;
     ae0:	c1 e0       	ldi	r28, 0x01	; 1
     ae2:	01 c0       	rjmp	.+2      	; 0xae6 <_ZN7Network8testRecvEv+0x40>
		case 39:
		case 40:
		case 41:
			break;
		default:
			result = false;
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
			//setDebugVal(5);
			break;
	}	
	
	return result;
}
     ae6:	8c 2f       	mov	r24, r28
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <_ZN7Network14processCommandEv>:

void Network::processCommand(){
	if (recvBuffer[DST_ADDRESS_OFFSET] != address)
     aec:	90 91 b0 00 	lds	r25, 0x00B0
     af0:	80 91 aa 00 	lds	r24, 0x00AA
     af4:	98 17       	cp	r25, r24
     af6:	09 f0       	breq	.+2      	; 0xafa <_ZN7Network14processCommandEv+0xe>
     af8:	ee c0       	rjmp	.+476    	; 0xcd6 <_ZN7Network14processCommandEv+0x1ea>
		return;

	unsigned char temp = 0, temp1 = 0;
	
	switch (recvBuffer[COMMAND_OFFSET]){
     afa:	80 91 b2 00 	lds	r24, 0x00B2
     afe:	8b 30       	cpi	r24, 0x0B	; 11
     b00:	09 f4       	brne	.+2      	; 0xb04 <_ZN7Network14processCommandEv+0x18>
     b02:	53 c0       	rjmp	.+166    	; 0xbaa <_ZN7Network14processCommandEv+0xbe>
     b04:	8c 30       	cpi	r24, 0x0C	; 12
     b06:	30 f4       	brcc	.+12     	; 0xb14 <_ZN7Network14processCommandEv+0x28>
     b08:	89 30       	cpi	r24, 0x09	; 9
     b0a:	59 f0       	breq	.+22     	; 0xb22 <_ZN7Network14processCommandEv+0x36>
     b0c:	8a 30       	cpi	r24, 0x0A	; 10
     b0e:	09 f0       	breq	.+2      	; 0xb12 <_ZN7Network14processCommandEv+0x26>
     b10:	e1 c0       	rjmp	.+450    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
     b12:	29 c0       	rjmp	.+82     	; 0xb66 <_ZN7Network14processCommandEv+0x7a>
     b14:	8e 39       	cpi	r24, 0x9E	; 158
     b16:	09 f4       	brne	.+2      	; 0xb1a <_ZN7Network14processCommandEv+0x2e>
     b18:	8e c0       	rjmp	.+284    	; 0xc36 <_ZN7Network14processCommandEv+0x14a>
     b1a:	8f 39       	cpi	r24, 0x9F	; 159
     b1c:	09 f0       	breq	.+2      	; 0xb20 <_ZN7Network14processCommandEv+0x34>
     b1e:	da c0       	rjmp	.+436    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
     b20:	66 c0       	rjmp	.+204    	; 0xbee <_ZN7Network14processCommandEv+0x102>
		case 9:
			zatvorOpen();
     b22:	d0 d2       	rcall	.+1440   	; 0x10c4 <_Z10zatvorOpenv>
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 1, 9);
     b24:	00 d0       	rcall	.+0      	; 0xb26 <_ZN7Network14processCommandEv+0x3a>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <_ZN7Network14processCommandEv+0x3c>
     b28:	00 d0       	rcall	.+0      	; 0xb2a <_ZN7Network14processCommandEv+0x3e>
     b2a:	ed b7       	in	r30, 0x3d	; 61
     b2c:	fe b7       	in	r31, 0x3e	; 62
     b2e:	31 96       	adiw	r30, 0x01	; 1
     b30:	80 91 b1 00 	lds	r24, 0x00B1
     b34:	ad b7       	in	r26, 0x3d	; 61
     b36:	be b7       	in	r27, 0x3e	; 62
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	8c 93       	st	X, r24
     b3c:	80 91 aa 00 	lds	r24, 0x00AA
     b40:	81 83       	std	Z+1, r24	; 0x01
     b42:	88 e7       	ldi	r24, 0x78	; 120
     b44:	82 83       	std	Z+2, r24	; 0x02
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	83 83       	std	Z+3, r24	; 0x03
     b4a:	89 e0       	ldi	r24, 0x09	; 9
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	95 83       	std	Z+5, r25	; 0x05
     b50:	84 83       	std	Z+4, r24	; 0x04
     b52:	cf de       	rcall	.-610    	; 0x8f2 <_ZN7Network12setSendFrameEccccz>
			break;
     b54:	8d b7       	in	r24, 0x3d	; 61
     b56:	9e b7       	in	r25, 0x3e	; 62
     b58:	06 96       	adiw	r24, 0x06	; 6
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	9e bf       	out	0x3e, r25	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	8d bf       	out	0x3d, r24	; 61
     b64:	b7 c0       	rjmp	.+366    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
		case 10:
			zatvorClose();
     b66:	c0 d2       	rcall	.+1408   	; 0x10e8 <_Z11zatvorClosev>
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 1, 10);
     b68:	00 d0       	rcall	.+0      	; 0xb6a <_ZN7Network14processCommandEv+0x7e>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <_ZN7Network14processCommandEv+0x80>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <_ZN7Network14processCommandEv+0x82>
     b6e:	ed b7       	in	r30, 0x3d	; 61
     b70:	fe b7       	in	r31, 0x3e	; 62
     b72:	31 96       	adiw	r30, 0x01	; 1
     b74:	80 91 b1 00 	lds	r24, 0x00B1
     b78:	ad b7       	in	r26, 0x3d	; 61
     b7a:	be b7       	in	r27, 0x3e	; 62
     b7c:	11 96       	adiw	r26, 0x01	; 1
     b7e:	8c 93       	st	X, r24
     b80:	80 91 aa 00 	lds	r24, 0x00AA
     b84:	81 83       	std	Z+1, r24	; 0x01
     b86:	88 e7       	ldi	r24, 0x78	; 120
     b88:	82 83       	std	Z+2, r24	; 0x02
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	83 83       	std	Z+3, r24	; 0x03
     b8e:	8a e0       	ldi	r24, 0x0A	; 10
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	95 83       	std	Z+5, r25	; 0x05
     b94:	84 83       	std	Z+4, r24	; 0x04
     b96:	ad de       	rcall	.-678    	; 0x8f2 <_ZN7Network12setSendFrameEccccz>
			break;
     b98:	8d b7       	in	r24, 0x3d	; 61
     b9a:	9e b7       	in	r25, 0x3e	; 62
     b9c:	06 96       	adiw	r24, 0x06	; 6
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	9e bf       	out	0x3e, r25	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	8d bf       	out	0x3d, r24	; 61
     ba8:	95 c0       	rjmp	.+298    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
		case 11:
			zatvorStop();
     baa:	b0 d2       	rcall	.+1376   	; 0x110c <_Z10zatvorStopv>
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 1, 11);
     bac:	00 d0       	rcall	.+0      	; 0xbae <_ZN7Network14processCommandEv+0xc2>
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <_ZN7Network14processCommandEv+0xc4>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <_ZN7Network14processCommandEv+0xc6>
     bb2:	ed b7       	in	r30, 0x3d	; 61
     bb4:	fe b7       	in	r31, 0x3e	; 62
     bb6:	31 96       	adiw	r30, 0x01	; 1
     bb8:	80 91 b1 00 	lds	r24, 0x00B1
     bbc:	ad b7       	in	r26, 0x3d	; 61
     bbe:	be b7       	in	r27, 0x3e	; 62
     bc0:	11 96       	adiw	r26, 0x01	; 1
     bc2:	8c 93       	st	X, r24
     bc4:	80 91 aa 00 	lds	r24, 0x00AA
     bc8:	81 83       	std	Z+1, r24	; 0x01
     bca:	88 e7       	ldi	r24, 0x78	; 120
     bcc:	82 83       	std	Z+2, r24	; 0x02
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	83 83       	std	Z+3, r24	; 0x03
     bd2:	8b e0       	ldi	r24, 0x0B	; 11
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	95 83       	std	Z+5, r25	; 0x05
     bd8:	84 83       	std	Z+4, r24	; 0x04
     bda:	8b de       	rcall	.-746    	; 0x8f2 <_ZN7Network12setSendFrameEccccz>
			break;
     bdc:	8d b7       	in	r24, 0x3d	; 61
     bde:	9e b7       	in	r25, 0x3e	; 62
     be0:	06 96       	adiw	r24, 0x06	; 6
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	9e bf       	out	0x3e, r25	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	8d bf       	out	0x3d, r24	; 61
     bec:	73 c0       	rjmp	.+230    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
		case 159:
			SetOuts(recvBuffer[PARAMS_COUNT_OFFSET + 1]);
     bee:	80 91 b4 00 	lds	r24, 0x00B4
     bf2:	53 d2       	rcall	.+1190   	; 0x109a <_Z7SetOutsh>
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 1, 159);
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <_ZN7Network14processCommandEv+0x10a>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <_ZN7Network14processCommandEv+0x10c>
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <_ZN7Network14processCommandEv+0x10e>
     bfa:	ed b7       	in	r30, 0x3d	; 61
     bfc:	fe b7       	in	r31, 0x3e	; 62
     bfe:	31 96       	adiw	r30, 0x01	; 1
     c00:	80 91 b1 00 	lds	r24, 0x00B1
     c04:	ad b7       	in	r26, 0x3d	; 61
     c06:	be b7       	in	r27, 0x3e	; 62
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	8c 93       	st	X, r24
     c0c:	80 91 aa 00 	lds	r24, 0x00AA
     c10:	81 83       	std	Z+1, r24	; 0x01
     c12:	88 e7       	ldi	r24, 0x78	; 120
     c14:	82 83       	std	Z+2, r24	; 0x02
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	83 83       	std	Z+3, r24	; 0x03
     c1a:	8f e9       	ldi	r24, 0x9F	; 159
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	95 83       	std	Z+5, r25	; 0x05
     c20:	84 83       	std	Z+4, r24	; 0x04
     c22:	67 de       	rcall	.-818    	; 0x8f2 <_ZN7Network12setSendFrameEccccz>
			break;
     c24:	8d b7       	in	r24, 0x3d	; 61
     c26:	9e b7       	in	r25, 0x3e	; 62
     c28:	06 96       	adiw	r24, 0x06	; 6
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	9e bf       	out	0x3e, r25	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	8d bf       	out	0x3d, r24	; 61
     c34:	4f c0       	rjmp	.+158    	; 0xcd4 <_ZN7Network14processCommandEv+0x1e8>
		case 158:
			temp = 0;
			switch (getSensorState()){
     c36:	c2 d0       	rcall	.+388    	; 0xdbc <_Z14getSensorStatev>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	31 f0       	breq	.+12     	; 0xc48 <_ZN7Network14processCommandEv+0x15c>
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	31 f0       	breq	.+12     	; 0xc4c <_ZN7Network14processCommandEv+0x160>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	31 f0       	breq	.+12     	; 0xc50 <_ZN7Network14processCommandEv+0x164>
		case 159:
			SetOuts(recvBuffer[PARAMS_COUNT_OFFSET + 1]);
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 1, 159);
			break;
		case 158:
			temp = 0;
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <_ZN7Network14processCommandEv+0x166>
			switch (getSensorState()){
				case SENSOR_STATE_OPEN:
					temp = 0x10;
					break;
				case SENSOR_STATE_CLOSE:
					temp = 0x04;
     c48:	44 e0       	ldi	r20, 0x04	; 4
					break;
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <_ZN7Network14processCommandEv+0x166>
				case SENSOR_STATE_WORK:
					temp = 0x00;
					break;
				case SENSOR_STATE_FAULT:
					temp = 0x16;
     c4c:	46 e1       	ldi	r20, 0x16	; 22
					break;
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <_ZN7Network14processCommandEv+0x166>
			break;
		case 158:
			temp = 0;
			switch (getSensorState()){
				case SENSOR_STATE_OPEN:
					temp = 0x10;
     c50:	40 e1       	ldi	r20, 0x10	; 16
				case SENSOR_STATE_FAULT:
					temp = 0x16;
					break;
			}
	 
			temp|= f_excessCurrentCache;
     c52:	20 91 86 00 	lds	r18, 0x0086
			f_excessCurrentCache = 0;
     c56:	10 92 86 00 	sts	0x0086, r1
			if (driveDirect == 1){
     c5a:	80 91 9e 00 	lds	r24, 0x009E
     c5e:	90 91 9f 00 	lds	r25, 0x009F
     c62:	81 30       	cpi	r24, 0x01	; 1
     c64:	91 05       	cpc	r25, r1
     c66:	19 f4       	brne	.+6      	; 0xc6e <_ZN7Network14processCommandEv+0x182>
				temp1 = current[1];
     c68:	30 91 9c 00 	lds	r19, 0x009C
     c6c:	07 c0       	rjmp	.+14     	; 0xc7c <_ZN7Network14processCommandEv+0x190>
			}else if (driveDirect == 2){
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	91 05       	cpc	r25, r1
     c72:	19 f4       	brne	.+6      	; 0xc7a <_ZN7Network14processCommandEv+0x18e>
				temp1 = current[0];
     c74:	30 91 9a 00 	lds	r19, 0x009A
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <_ZN7Network14processCommandEv+0x190>
			}else{
				temp1 = 0;
     c7a:	30 e0       	ldi	r19, 0x00	; 0
				case SENSOR_STATE_FAULT:
					temp = 0x16;
					break;
			}
	 
			temp|= f_excessCurrentCache;
     c7c:	90 91 00 01 	lds	r25, 0x0100
     c80:	29 2b       	or	r18, r25
			}else{
				temp1 = 0;
			}
			
			temp |= outsState;
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 3, 158, temp, temp1);
     c82:	ad b7       	in	r26, 0x3d	; 61
     c84:	be b7       	in	r27, 0x3e	; 62
     c86:	1a 97       	sbiw	r26, 0x0a	; 10
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	be bf       	out	0x3e, r27	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	ad bf       	out	0x3d, r26	; 61
     c92:	ed b7       	in	r30, 0x3d	; 61
     c94:	fe b7       	in	r31, 0x3e	; 62
     c96:	31 96       	adiw	r30, 0x01	; 1
     c98:	90 91 b1 00 	lds	r25, 0x00B1
     c9c:	11 96       	adiw	r26, 0x01	; 1
     c9e:	9c 93       	st	X, r25
     ca0:	90 91 aa 00 	lds	r25, 0x00AA
     ca4:	91 83       	std	Z+1, r25	; 0x01
     ca6:	98 e7       	ldi	r25, 0x78	; 120
     ca8:	92 83       	std	Z+2, r25	; 0x02
     caa:	93 e0       	ldi	r25, 0x03	; 3
     cac:	93 83       	std	Z+3, r25	; 0x03
     cae:	8e e9       	ldi	r24, 0x9E	; 158
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	95 83       	std	Z+5, r25	; 0x05
     cb4:	84 83       	std	Z+4, r24	; 0x04
				temp1 = current[0];
			}else{
				temp1 = 0;
			}
			
			temp |= outsState;
     cb6:	82 2f       	mov	r24, r18
     cb8:	84 2b       	or	r24, r20
			setSendFrame(recvBuffer[SRC_ADDRESS_OFFSET], address, 120, 3, 158, temp, temp1);
     cba:	86 83       	std	Z+6, r24	; 0x06
     cbc:	17 82       	std	Z+7, r1	; 0x07
     cbe:	30 87       	std	Z+8, r19	; 0x08
     cc0:	11 86       	std	Z+9, r1	; 0x09
     cc2:	17 de       	rcall	.-978    	; 0x8f2 <_ZN7Network12setSendFrameEccccz>

			break;
     cc4:	8d b7       	in	r24, 0x3d	; 61
     cc6:	9e b7       	in	r25, 0x3e	; 62
     cc8:	0a 96       	adiw	r24, 0x0a	; 10
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	f8 94       	cli
     cce:	9e bf       	out	0x3e, r25	; 62
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	8d bf       	out	0x3d, r24	; 61
	}
	
	startSend();
     cd4:	b8 de       	rcall	.-656    	; 0xa46 <_ZN7Network9startSendEv>
     cd6:	08 95       	ret

00000cd8 <_ZN7Network4recvEv>:
		fSync = true;
		clearSyncCounter();
	}
}

void Network::recv(){
     cd8:	ef 92       	push	r14
     cda:	ff 92       	push	r15
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
	clearSyncCounter();
     ce4:	c1 de       	rcall	.-638    	; 0xa68 <_ZN7Network16clearSyncCounterEv>
	
	unsigned char status = UCSRA;
     ce6:	8b b1       	in	r24, 0x0b	; 11
	
	if ((status & (1 << FE | 1 << DOR)) != 0){
     ce8:	88 71       	andi	r24, 0x18	; 24
     cea:	19 f0       	breq	.+6      	; 0xcf2 <_ZN7Network4recvEv+0x1a>
		status = UDR;
     cec:	8c b1       	in	r24, 0x0c	; 12
		initReceiver();
     cee:	40 de       	rcall	.-896    	; 0x970 <_ZN7Network12initReceiverEv>
     cf0:	3b c0       	rjmp	.+118    	; 0xd68 <_ZN7Network4recvEv+0x90>
	}else{
		recvBuffer[recvBufferPos] = UDR;
     cf2:	e0 90 ae 00 	lds	r14, 0x00AE
     cf6:	f0 90 af 00 	lds	r15, 0x00AF
     cfa:	8c b1       	in	r24, 0x0c	; 12
     cfc:	f7 01       	movw	r30, r14
     cfe:	e0 55       	subi	r30, 0x50	; 80
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	80 83       	st	Z, r24
		
		if(!fSync)
     d04:	80 91 ad 00 	lds	r24, 0x00AD
     d08:	88 23       	and	r24, r24
     d0a:	71 f1       	breq	.+92     	; 0xd68 <_ZN7Network4recvEv+0x90>
			return;
			
		if(recvBufferPos == PARAMS_COUNT_OFFSET){
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	e8 16       	cp	r14, r24
     d10:	f1 04       	cpc	r15, r1
     d12:	29 f4       	brne	.+10     	; 0xd1e <_ZN7Network4recvEv+0x46>
			if (!testParamsCount()){
     d14:	c1 de       	rcall	.-638    	; 0xa98 <_ZN7Network15testParamsCountEv>
     d16:	88 23       	and	r24, r24
     d18:	01 f5       	brne	.+64     	; 0xd5a <_ZN7Network4recvEv+0x82>
				//setDebugVal(1);
				initReceiver();
     d1a:	2a de       	rcall	.-940    	; 0x970 <_ZN7Network12initReceiverEv>
				return;
     d1c:	25 c0       	rjmp	.+74     	; 0xd68 <_ZN7Network4recvEv+0x90>
			}					
		}else
			if(recvBufferPos == recvBuffer[PARAMS_COUNT_OFFSET] + 4){
     d1e:	c0 91 b3 00 	lds	r28, 0x00B3
     d22:	d0 e0       	ldi	r29, 0x00	; 0
     d24:	24 96       	adiw	r28, 0x04	; 4
     d26:	ec 16       	cp	r14, r28
     d28:	fd 06       	cpc	r15, r29
     d2a:	b9 f4       	brne	.+46     	; 0xd5a <_ZN7Network4recvEv+0x82>
				if (getCrc(recvBuffer, recvBuffer[PARAMS_COUNT_OFFSET] + 4) != 
     d2c:	00 eb       	ldi	r16, 0xB0	; 176
     d2e:	10 e0       	ldi	r17, 0x00	; 0
     d30:	c8 01       	movw	r24, r16
     d32:	b7 01       	movw	r22, r14
     d34:	cc dd       	rcall	.-1128   	; 0x8ce <_ZN7Network6getCrcEPhj>
						recvBuffer[recvBuffer[PARAMS_COUNT_OFFSET] + 4]){
     d36:	c0 0f       	add	r28, r16
     d38:	d1 1f       	adc	r29, r17
				initReceiver();
				return;
			}					
		}else
			if(recvBufferPos == recvBuffer[PARAMS_COUNT_OFFSET] + 4){
				if (getCrc(recvBuffer, recvBuffer[PARAMS_COUNT_OFFSET] + 4) != 
     d3a:	98 81       	ld	r25, Y
     d3c:	89 17       	cp	r24, r25
     d3e:	11 f0       	breq	.+4      	; 0xd44 <_ZN7Network4recvEv+0x6c>
						recvBuffer[recvBuffer[PARAMS_COUNT_OFFSET] + 4]){
					initReceiver();
     d40:	17 de       	rcall	.-978    	; 0x970 <_ZN7Network12initReceiverEv>
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <_ZN7Network4recvEv+0x76>
					//setDebugVal(2);
				}else if (!testRecv()){
     d44:	b0 de       	rcall	.-672    	; 0xaa6 <_ZN7Network8testRecvEv>
     d46:	88 23       	and	r24, r24
     d48:	11 f4       	brne	.+4      	; 0xd4e <_ZN7Network4recvEv+0x76>
					initReceiver();
     d4a:	12 de       	rcall	.-988    	; 0x970 <_ZN7Network12initReceiverEv>
					return;
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <_ZN7Network4recvEv+0x90>
				}
									
				processCommand();	
     d4e:	ce de       	rcall	.-612    	; 0xaec <_ZN7Network14processCommandEv>
				recvBufferPos = 0;	
     d50:	10 92 af 00 	sts	0x00AF, r1
     d54:	10 92 ae 00 	sts	0x00AE, r1
				return;
     d58:	07 c0       	rjmp	.+14     	; 0xd68 <_ZN7Network4recvEv+0x90>
			}				
			++recvBufferPos;
     d5a:	08 94       	sec
     d5c:	e1 1c       	adc	r14, r1
     d5e:	f1 1c       	adc	r15, r1
     d60:	f0 92 af 00 	sts	0x00AF, r15
     d64:	e0 92 ae 00 	sts	0x00AE, r14
	}	
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	ff 90       	pop	r15
     d72:	ef 90       	pop	r14
     d74:	08 95       	ret

00000d76 <__vector_11>:

ISR(USART_TXC_vect){
	Network::send();
}

ISR(USART_RXC_vect){
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
	Network::recv();
     d98:	9f df       	rcall	.-194    	; 0xcd8 <_ZN7Network4recvEv>
}
     d9a:	ff 91       	pop	r31
     d9c:	ef 91       	pop	r30
     d9e:	bf 91       	pop	r27
     da0:	af 91       	pop	r26
     da2:	9f 91       	pop	r25
     da4:	8f 91       	pop	r24
     da6:	7f 91       	pop	r23
     da8:	6f 91       	pop	r22
     daa:	5f 91       	pop	r21
     dac:	4f 91       	pop	r20
     dae:	3f 91       	pop	r19
     db0:	2f 91       	pop	r18
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <_Z14getSensorStatev>:
#define const_InvalideVSensTimer 300

enum SENSOR_STATE getSensorState()
{
 return sensorState; 
}
     dbc:	80 91 e4 00 	lds	r24, 0x00E4
     dc0:	08 95       	ret

00000dc2 <_Z14getSensorReadyv>:

enum SENSOR_READY getSensorReady()
{
 return sensorReady; 
}
     dc2:	80 91 e3 00 	lds	r24, 0x00E3
     dc6:	08 95       	ret

00000dc8 <_Z7getPin0v>:

unsigned char getPin0()
{
 return (PINC & 0x02 ) >> 1; 
     dc8:	83 b3       	in	r24, 0x13	; 19
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	82 70       	andi	r24, 0x02	; 2
     dce:	90 70       	andi	r25, 0x00	; 0
     dd0:	95 95       	asr	r25
     dd2:	87 95       	ror	r24
}
     dd4:	08 95       	ret

00000dd6 <_Z7getPin1v>:

unsigned char getPin1()
{
 return (PINC & 0x08 ) >> 3; 
     dd6:	83 b3       	in	r24, 0x13	; 19
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	88 70       	andi	r24, 0x08	; 8
     ddc:	90 70       	andi	r25, 0x00	; 0
     dde:	95 95       	asr	r25
     de0:	87 95       	ror	r24
     de2:	95 95       	asr	r25
     de4:	87 95       	ror	r24
     de6:	95 95       	asr	r25
     de8:	87 95       	ror	r24
}
     dea:	08 95       	ret

00000dec <_Z12pin0ValueDecv>:

void pin0ValueDec()
{
 if (pin0Value > -126)
     dec:	80 91 df 00 	lds	r24, 0x00DF
     df0:	90 91 e0 00 	lds	r25, 0x00E0
     df4:	2f ef       	ldi	r18, 0xFF	; 255
     df6:	83 38       	cpi	r24, 0x83	; 131
     df8:	92 07       	cpc	r25, r18
     dfa:	2c f0       	brlt	.+10     	; 0xe06 <_Z12pin0ValueDecv+0x1a>
   pin0Value--;
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	90 93 e0 00 	sts	0x00E0, r25
     e02:	80 93 df 00 	sts	0x00DF, r24
     e06:	08 95       	ret

00000e08 <_Z12pin0ValueIncv>:
}

void pin0ValueInc()
{
 if (pin0Value < 126)
     e08:	80 91 df 00 	lds	r24, 0x00DF
     e0c:	90 91 e0 00 	lds	r25, 0x00E0
     e10:	8e 37       	cpi	r24, 0x7E	; 126
     e12:	91 05       	cpc	r25, r1
     e14:	2c f4       	brge	.+10     	; 0xe20 <_Z12pin0ValueIncv+0x18>
   pin0Value++;
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	90 93 e0 00 	sts	0x00E0, r25
     e1c:	80 93 df 00 	sts	0x00DF, r24
     e20:	08 95       	ret

00000e22 <_Z12pin1ValueDecv>:
}

void pin1ValueDec()
{
 if (pin1Value > -126)
     e22:	80 91 dd 00 	lds	r24, 0x00DD
     e26:	90 91 de 00 	lds	r25, 0x00DE
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	83 38       	cpi	r24, 0x83	; 131
     e2e:	92 07       	cpc	r25, r18
     e30:	2c f0       	brlt	.+10     	; 0xe3c <_Z12pin1ValueDecv+0x1a>
   pin1Value--;
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	90 93 de 00 	sts	0x00DE, r25
     e38:	80 93 dd 00 	sts	0x00DD, r24
     e3c:	08 95       	ret

00000e3e <_Z12pin1ValueIncv>:
}

void pin1ValueInc()
{
 if (pin1Value < 126)
     e3e:	80 91 dd 00 	lds	r24, 0x00DD
     e42:	90 91 de 00 	lds	r25, 0x00DE
     e46:	8e 37       	cpi	r24, 0x7E	; 126
     e48:	91 05       	cpc	r25, r1
     e4a:	2c f4       	brge	.+10     	; 0xe56 <_Z12pin1ValueIncv+0x18>
   pin1Value++;
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	90 93 de 00 	sts	0x00DE, r25
     e52:	80 93 dd 00 	sts	0x00DD, r24
     e56:	08 95       	ret

00000e58 <_Z18updateStateFromPinv>:
}

void updateStateFromPin()
{
  if ((pin0Value > 0) && (pin1Value <= 0))
     e58:	80 91 df 00 	lds	r24, 0x00DF
     e5c:	90 91 e0 00 	lds	r25, 0x00E0
     e60:	18 16       	cp	r1, r24
     e62:	19 06       	cpc	r1, r25
     e64:	5c f4       	brge	.+22     	; 0xe7c <_Z18updateStateFromPinv+0x24>
     e66:	80 91 dd 00 	lds	r24, 0x00DD
     e6a:	90 91 de 00 	lds	r25, 0x00DE
     e6e:	18 16       	cp	r1, r24
     e70:	19 06       	cpc	r1, r25
     e72:	9c f0       	brlt	.+38     	; 0xe9a <_Z18updateStateFromPinv+0x42>
	sensorState = SENSOR_STATE_CLOSE;
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	80 93 e4 00 	sts	0x00E4, r24
     e7a:	08 95       	ret
  else
   if ((pin0Value <= 0) && (pin1Value > 0))
     e7c:	80 91 dd 00 	lds	r24, 0x00DD
     e80:	90 91 de 00 	lds	r25, 0x00DE
     e84:	18 16       	cp	r1, r24
     e86:	19 06       	cpc	r1, r25
     e88:	24 f4       	brge	.+8      	; 0xe92 <_Z18updateStateFromPinv+0x3a>
	 sensorState = SENSOR_STATE_OPEN;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	80 93 e4 00 	sts	0x00E4, r24
     e90:	08 95       	ret
   else
    if ((pin0Value <= 0) && (pin1Value <= 0))
	  sensorState = SENSOR_STATE_WORK;
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	80 93 e4 00 	sts	0x00E4, r24
     e98:	08 95       	ret
    else
	  sensorState = SENSOR_STATE_FAULT;
     e9a:	84 e0       	ldi	r24, 0x04	; 4
     e9c:	80 93 e4 00 	sts	0x00E4, r24
     ea0:	08 95       	ret

00000ea2 <_Z15SensorsTimeFuncv>:
  invalideVSensTimer=const_InvalideVSensTimer;
}

void SensorsTimeFunc(void)
{
  if (voltage < MINIMAL_VOLTAGE)
     ea2:	80 91 98 00 	lds	r24, 0x0098
     ea6:	90 91 99 00 	lds	r25, 0x0099
     eaa:	86 39       	cpi	r24, 0x96	; 150
     eac:	91 05       	cpc	r25, r1
     eae:	d0 f4       	brcc	.+52     	; 0xee4 <_Z15SensorsTimeFuncv+0x42>
  {
   f_invalideVoltage=1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 dc 00 	sts	0x00DC, r24
   invalideVSensTimer=const_InvalideVSensTimer;
     eb6:	8c e2       	ldi	r24, 0x2C	; 44
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	90 93 db 00 	sts	0x00DB, r25
     ebe:	80 93 da 00 	sts	0x00DA, r24
   
   sensorState = SENSOR_STATE_UNDEFINED;
     ec2:	10 92 e4 00 	sts	0x00E4, r1
   
   pin0Value = 0;
     ec6:	10 92 e0 00 	sts	0x00E0, r1
     eca:	10 92 df 00 	sts	0x00DF, r1
   pin1Value = 0;
     ece:	10 92 de 00 	sts	0x00DE, r1
     ed2:	10 92 dd 00 	sts	0x00DD, r1
   pinCounter = PIN_COUNTER_MAX;
     ed6:	84 e6       	ldi	r24, 0x64	; 100
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	90 93 e2 00 	sts	0x00E2, r25
     ede:	80 93 e1 00 	sts	0x00E1, r24
     ee2:	08 95       	ret
  }
  else
  {
   if (f_invalideVoltage == 1)
     ee4:	80 91 dc 00 	lds	r24, 0x00DC
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	81 f4       	brne	.+32     	; 0xf0c <_Z15SensorsTimeFuncv+0x6a>
   {
    if (invalideVSensTimer-- == 0)
     eec:	80 91 da 00 	lds	r24, 0x00DA
     ef0:	90 91 db 00 	lds	r25, 0x00DB
     ef4:	9c 01       	movw	r18, r24
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	30 40       	sbci	r19, 0x00	; 0
     efa:	30 93 db 00 	sts	0x00DB, r19
     efe:	20 93 da 00 	sts	0x00DA, r18
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	91 f5       	brne	.+100    	; 0xf6a <_Z15SensorsTimeFuncv+0xc8>
    {
     f_invalideVoltage = 0;
     f06:	10 92 dc 00 	sts	0x00DC, r1
     f0a:	08 95       	ret
    }
   }
   else
   {
    switch (getPin0())
     f0c:	5d df       	rcall	.-326    	; 0xdc8 <_Z7getPin0v>
     f0e:	88 23       	and	r24, r24
     f10:	19 f0       	breq	.+6      	; 0xf18 <_Z15SensorsTimeFuncv+0x76>
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	21 f4       	brne	.+8      	; 0xf1e <_Z15SensorsTimeFuncv+0x7c>
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <_Z15SensorsTimeFuncv+0x7a>
    {
     case 0: pin0ValueDec();break;
     f18:	69 df       	rcall	.-302    	; 0xdec <_Z12pin0ValueDecv>
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <_Z15SensorsTimeFuncv+0x7c>
     case 1: pin0ValueInc();break;
     f1c:	75 df       	rcall	.-278    	; 0xe08 <_Z12pin0ValueIncv>
    }
	
    switch (getPin1())
     f1e:	5b df       	rcall	.-330    	; 0xdd6 <_Z7getPin1v>
     f20:	88 23       	and	r24, r24
     f22:	19 f0       	breq	.+6      	; 0xf2a <_Z15SensorsTimeFuncv+0x88>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	21 f4       	brne	.+8      	; 0xf30 <_Z15SensorsTimeFuncv+0x8e>
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <_Z15SensorsTimeFuncv+0x8c>
    {
     case 0: pin1ValueDec();break;
     f2a:	7b df       	rcall	.-266    	; 0xe22 <_Z12pin1ValueDecv>
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <_Z15SensorsTimeFuncv+0x8e>
     case 1: pin1ValueInc();break;
     f2e:	87 df       	rcall	.-242    	; 0xe3e <_Z12pin1ValueIncv>
    }

    if (pinCounter != 0) {pinCounter--;}
     f30:	80 91 e1 00 	lds	r24, 0x00E1
     f34:	90 91 e2 00 	lds	r25, 0x00E2
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	31 f0       	breq	.+12     	; 0xf48 <_Z15SensorsTimeFuncv+0xa6>
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	90 93 e2 00 	sts	0x00E2, r25
     f42:	80 93 e1 00 	sts	0x00E1, r24
     f46:	08 95       	ret
    else
    {
     updateStateFromPin();
     f48:	87 df       	rcall	.-242    	; 0xe58 <_Z18updateStateFromPinv>
	 pin0Value = 0;
     f4a:	10 92 e0 00 	sts	0x00E0, r1
     f4e:	10 92 df 00 	sts	0x00DF, r1
	 pin1Value = 0;
     f52:	10 92 de 00 	sts	0x00DE, r1
     f56:	10 92 dd 00 	sts	0x00DD, r1
	 pinCounter = PIN_COUNTER_MAX;
     f5a:	84 e6       	ldi	r24, 0x64	; 100
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 e2 00 	sts	0x00E2, r25
     f62:	80 93 e1 00 	sts	0x00E1, r24
	 sensorReady = SENSOR_READY_TRUE;
     f66:	10 92 e3 00 	sts	0x00E3, r1
     f6a:	08 95       	ret

00000f6c <_Z11InitSensorsv>:
}

void SensorsTimeFunc(void);

void InitSensors(void)
{
     f6c:	cf 93       	push	r28
  sensorReady = SENSOR_READY_FALSE;
     f6e:	c1 e0       	ldi	r28, 0x01	; 1
     f70:	c0 93 e3 00 	sts	0x00E3, r28
  sensorState = SENSOR_STATE_UNDEFINED;
     f74:	10 92 e4 00 	sts	0x00E4, r1
  
  pin0Value = 0;
     f78:	10 92 e0 00 	sts	0x00E0, r1
     f7c:	10 92 df 00 	sts	0x00DF, r1
  pin1Value = 0;
     f80:	10 92 de 00 	sts	0x00DE, r1
     f84:	10 92 dd 00 	sts	0x00DD, r1
  pinCounter = PIN_COUNTER_MAX;
     f88:	84 e6       	ldi	r24, 0x64	; 100
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	90 93 e2 00 	sts	0x00E2, r25
     f90:	80 93 e1 00 	sts	0x00E1, r24
  
  RegVirtualTimer(&SensorsTimeFunc);
     f94:	81 e5       	ldi	r24, 0x51	; 81
     f96:	97 e0       	ldi	r25, 0x07	; 7
     f98:	61 d0       	rcall	.+194    	; 0x105c <_Z15RegVirtualTimerPFvvE>
  
  DDRC &= 0xe1;
     f9a:	84 b3       	in	r24, 0x14	; 20
     f9c:	81 7e       	andi	r24, 0xE1	; 225
     f9e:	84 bb       	out	0x14, r24	; 20
  PORTC &= 0xe1;
     fa0:	85 b3       	in	r24, 0x15	; 21
     fa2:	81 7e       	andi	r24, 0xE1	; 225
     fa4:	85 bb       	out	0x15, r24	; 21
  
  f_invalideVoltage=1;
     fa6:	c0 93 dc 00 	sts	0x00DC, r28
  invalideVSensTimer=const_InvalideVSensTimer;
     faa:	8c e2       	ldi	r24, 0x2C	; 44
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	90 93 db 00 	sts	0x00DB, r25
     fb2:	80 93 da 00 	sts	0x00DA, r24
}
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <_Z17InitVirtualTimersv>:

TPointToHandlerVirtualTimers VirtualTimers[maxNumberTimers];
unsigned char NumTimers=0;

void InitVirtualTimers(void)
{
     fba:	e6 ee       	ldi	r30, 0xE6	; 230
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
#define maxNumberTimers 10

TPointToHandlerVirtualTimers VirtualTimers[maxNumberTimers];
unsigned char NumTimers=0;

void InitVirtualTimers(void)
     fbe:	cf 01       	movw	r24, r30
     fc0:	42 96       	adiw	r24, 0x12	; 18
{
 char i;
 for (i=0;i<maxNumberTimers-1;i++) {VirtualTimers[i]=0;}
     fc2:	11 92       	st	Z+, r1
     fc4:	11 92       	st	Z+, r1
     fc6:	e8 17       	cp	r30, r24
     fc8:	f9 07       	cpc	r31, r25
     fca:	d9 f7       	brne	.-10     	; 0xfc2 <_Z17InitVirtualTimersv+0x8>
 NumTimers=0;
     fcc:	10 92 e5 00 	sts	0x00E5, r1
 TCCR2=0x0b;
     fd0:	8b e0       	ldi	r24, 0x0B	; 11
     fd2:	85 bd       	out	0x25, r24	; 37
 OCR2=115;
     fd4:	83 e7       	ldi	r24, 0x73	; 115
     fd6:	83 bd       	out	0x23, r24	; 35
 TIMSK|=0x80;
     fd8:	89 b7       	in	r24, 0x39	; 57
     fda:	80 68       	ori	r24, 0x80	; 128
     fdc:	89 bf       	out	0x39, r24	; 57
}
     fde:	08 95       	ret

00000fe0 <__vector_3>:

ISR(TIMER2_COMP_vect){
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	cf 93       	push	r28
    1004:	ef 93       	push	r30
    1006:	ff 93       	push	r31
 char i;
 for (i=0;i<NumTimers;i++) {(*VirtualTimers[i])();}
    1008:	80 91 e5 00 	lds	r24, 0x00E5
    100c:	88 23       	and	r24, r24
    100e:	91 f0       	breq	.+36     	; 0x1034 <__vector_3+0x54>
    1010:	c0 e0       	ldi	r28, 0x00	; 0
    1012:	06 ee       	ldi	r16, 0xE6	; 230
    1014:	10 e0       	ldi	r17, 0x00	; 0
    1016:	ec 2f       	mov	r30, r28
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	e0 0f       	add	r30, r16
    1020:	f1 1f       	adc	r31, r17
    1022:	01 90       	ld	r0, Z+
    1024:	f0 81       	ld	r31, Z
    1026:	e0 2d       	mov	r30, r0
    1028:	09 95       	icall
    102a:	cf 5f       	subi	r28, 0xFF	; 255
    102c:	80 91 e5 00 	lds	r24, 0x00E5
    1030:	c8 17       	cp	r28, r24
    1032:	88 f3       	brcs	.-30     	; 0x1016 <__vector_3+0x36>
}
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	cf 91       	pop	r28
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <_Z15RegVirtualTimerPFvvE>:

void RegVirtualTimer(TPointToHandlerVirtualTimers fpoint)
{
 if (NumTimers<maxNumberTimers) {VirtualTimers[NumTimers]=fpoint;NumTimers++;}
    105c:	20 91 e5 00 	lds	r18, 0x00E5
    1060:	2a 30       	cpi	r18, 0x0A	; 10
    1062:	58 f4       	brcc	.+22     	; 0x107a <_Z15RegVirtualTimerPFvvE+0x1e>
    1064:	e2 2f       	mov	r30, r18
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	ee 0f       	add	r30, r30
    106a:	ff 1f       	adc	r31, r31
    106c:	ea 51       	subi	r30, 0x1A	; 26
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	80 83       	st	Z, r24
    1074:	2f 5f       	subi	r18, 0xFF	; 255
    1076:	20 93 e5 00 	sts	0x00E5, r18
    107a:	08 95       	ret

0000107c <_Z9delayFuncv>:
 mdelay=0;f_delay=0;
 RegVirtualTimer(&delayFunc);
}

void delayFunc(void){
 if (mdelay==0) {f_delay=0;} else mdelay--;
    107c:	80 91 fa 00 	lds	r24, 0x00FA
    1080:	90 91 fb 00 	lds	r25, 0x00FB
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	19 f4       	brne	.+6      	; 0x108e <_Z9delayFuncv+0x12>
    1088:	10 92 fc 00 	sts	0x00FC, r1
    108c:	08 95       	ret
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	90 93 fb 00 	sts	0x00FB, r25
    1094:	80 93 fa 00 	sts	0x00FA, r24
    1098:	08 95       	ret

0000109a <_Z7SetOutsh>:
char b0, b1,b2;


#ifndef BUTTONS
void SetOuts(unsigned char value){
 DDRD|=0x60;
    109a:	91 b3       	in	r25, 0x11	; 17
    109c:	90 66       	ori	r25, 0x60	; 96
    109e:	91 bb       	out	0x11, r25	; 17
 if ((value&0x01) == 0x01){
    10a0:	80 ff       	sbrs	r24, 0
    10a2:	08 c0       	rjmp	.+16     	; 0x10b4 <_Z7SetOutsh+0x1a>
   PORTD|=0x40;outsState|=0x40;
    10a4:	96 9a       	sbi	0x12, 6	; 18
    10a6:	80 91 00 01 	lds	r24, 0x0100
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	80 93 00 01 	sts	0x0100, r24
   PORTD|=0x20;//outsState|=0x80;
    10b0:	95 9a       	sbi	0x12, 5	; 18
    10b2:	08 95       	ret
 }else{
   PORTD&=0xbf;outsState&=0xbf;
    10b4:	96 98       	cbi	0x12, 6	; 18
    10b6:	80 91 00 01 	lds	r24, 0x0100
    10ba:	8f 7b       	andi	r24, 0xBF	; 191
    10bc:	80 93 00 01 	sts	0x0100, r24
   PORTD&=0xdf;//outsState&=0x7f;
    10c0:	95 98       	cbi	0x12, 5	; 18
    10c2:	08 95       	ret

000010c4 <_Z10zatvorOpenv>:
	}
  }
}

void zatvorOpen(){
 if (DriveMove(1) == 0){
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	33 da       	rcall	.-2970   	; 0x52e <_Z9DriveMoveh>
    10c8:	88 23       	and	r24, r24
    10ca:	49 f4       	brne	.+18     	; 0x10de <_Z10zatvorOpenv+0x1a>
	 moveCh = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	90 93 05 01 	sts	0x0105, r25
    10d4:	80 93 04 01 	sts	0x0104, r24
	 DriveMove(0);
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	29 da       	rcall	.-2990   	; 0x52e <_Z9DriveMoveh>
    10dc:	08 95       	ret
 }else
 	 moveCh = 0;
    10de:	10 92 05 01 	sts	0x0105, r1
    10e2:	10 92 04 01 	sts	0x0104, r1
    10e6:	08 95       	ret

000010e8 <_Z11zatvorClosev>:
}

void zatvorClose(){
 if (DriveMove(2) == 0){
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	21 da       	rcall	.-3006   	; 0x52e <_Z9DriveMoveh>
    10ec:	88 23       	and	r24, r24
    10ee:	49 f4       	brne	.+18     	; 0x1102 <_Z11zatvorClosev+0x1a>
	 moveCh = 2;
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	90 93 05 01 	sts	0x0105, r25
    10f8:	80 93 04 01 	sts	0x0104, r24
	 DriveMove(0);
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	17 da       	rcall	.-3026   	; 0x52e <_Z9DriveMoveh>
    1100:	08 95       	ret
 }else
	 moveCh = 0;
    1102:	10 92 05 01 	sts	0x0105, r1
    1106:	10 92 04 01 	sts	0x0104, r1
    110a:	08 95       	ret

0000110c <_Z10zatvorStopv>:
}

void zatvorStop(){
 DriveMove(0);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0f da       	rcall	.-3042   	; 0x52e <_Z9DriveMoveh>
 moveCh = 0;
    1110:	10 92 05 01 	sts	0x0105, r1
    1114:	10 92 04 01 	sts	0x0104, r1
}
    1118:	08 95       	ret

0000111a <_Z7Processv>:
 }
 
 while (true) {asm("wdr");}
}

void Process(void){
    111a:	cf 93       	push	r28
  enum SENSOR_STATE state = getSensorState();
    111c:	4f de       	rcall	.-866    	; 0xdbc <_Z14getSensorStatev>
    111e:	c8 2f       	mov	r28, r24
  if ((state == SENSOR_STATE_FAULT) || (state == SENSOR_STATE_UNDEFINED))
    1120:	84 30       	cpi	r24, 0x04	; 4
    1122:	11 f0       	breq	.+4      	; 0x1128 <_Z7Processv+0xe>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <_Z7Processv+0x10>
	zatvorStop();
    1128:	f1 df       	rcall	.-30     	; 0x110c <_Z10zatvorStopv>
  
  if ((driveDirect == 1) && (state == SENSOR_STATE_OPEN))
    112a:	80 91 9e 00 	lds	r24, 0x009E
    112e:	90 91 9f 00 	lds	r25, 0x009F
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	19 f4       	brne	.+6      	; 0x113e <_Z7Processv+0x24>
    1138:	c1 30       	cpi	r28, 0x01	; 1
    113a:	09 f4       	brne	.+2      	; 0x113e <_Z7Processv+0x24>
	zatvorStop();
    113c:	e7 df       	rcall	.-50     	; 0x110c <_Z10zatvorStopv>
  if ((driveDirect == 2) && (state == SENSOR_STATE_CLOSE))
    113e:	80 91 9e 00 	lds	r24, 0x009E
    1142:	90 91 9f 00 	lds	r25, 0x009F
    1146:	82 30       	cpi	r24, 0x02	; 2
    1148:	91 05       	cpc	r25, r1
    114a:	19 f4       	brne	.+6      	; 0x1152 <_Z7Processv+0x38>
    114c:	c2 30       	cpi	r28, 0x02	; 2
    114e:	09 f4       	brne	.+2      	; 0x1152 <_Z7Processv+0x38>
	zatvorStop();
    1150:	dd df       	rcall	.-70     	; 0x110c <_Z10zatvorStopv>
  if (moveCh != 0){
    1152:	80 91 04 01 	lds	r24, 0x0104
    1156:	90 91 05 01 	lds	r25, 0x0105
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	61 f0       	breq	.+24     	; 0x1176 <_Z7Processv+0x5c>
	if (driveDirect == 0){
    115e:	20 91 9e 00 	lds	r18, 0x009E
    1162:	30 91 9f 00 	lds	r19, 0x009F
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	29 f4       	brne	.+10     	; 0x1176 <_Z7Processv+0x5c>
		DriveMove(moveCh);
    116c:	e0 d9       	rcall	.-3136   	; 0x52e <_Z9DriveMoveh>
		moveCh = 0;
    116e:	10 92 05 01 	sts	0x0105, r1
    1172:	10 92 04 01 	sts	0x0104, r1
	}
  }
}
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <_Z14delay_mks_1000i>:
 moveCh = 0;
}

void delay_mks_1000(int time){
 int i;int d;
 for (d=0;d<time+1;d++) {for (i=0;i<500;i++) {asm ("nop");}}
    117a:	ac 01       	movw	r20, r24
    117c:	4f 5f       	subi	r20, 0xFF	; 255
    117e:	5f 4f       	sbci	r21, 0xFF	; 255
    1180:	14 16       	cp	r1, r20
    1182:	15 06       	cpc	r1, r21
    1184:	54 f0       	brlt	.+20     	; 0x119a <_Z14delay_mks_1000i+0x20>
    1186:	08 95       	ret
    1188:	00 00       	nop
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	e9 f7       	brne	.-6      	; 0x1188 <_Z14delay_mks_1000i+0xe>
    118e:	2f 5f       	subi	r18, 0xFF	; 255
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	24 17       	cp	r18, r20
    1194:	35 07       	cpc	r19, r21
    1196:	2c f0       	brlt	.+10     	; 0x11a2 <_Z14delay_mks_1000i+0x28>
    1198:	08 95       	ret
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
void zatvorStop(){
 DriveMove(0);
 moveCh = 0;
}

void delay_mks_1000(int time){
    119e:	64 ef       	ldi	r22, 0xF4	; 244
    11a0:	71 e0       	ldi	r23, 0x01	; 1
    11a2:	cb 01       	movw	r24, r22
    11a4:	f1 cf       	rjmp	.-30     	; 0x1188 <_Z14delay_mks_1000i+0xe>

000011a6 <_Z13delay_mks_100i>:
 for (d=0;d<time+1;d++) {for (i=0;i<500;i++) {asm ("nop");}}
}

void delay_mks_100(int time){
 int i;int d;
 for (d=0;d<time+1;d++) {for (i=0;i<45;i++) {asm ("nop");}}
    11a6:	ac 01       	movw	r20, r24
    11a8:	4f 5f       	subi	r20, 0xFF	; 255
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	14 16       	cp	r1, r20
    11ae:	15 06       	cpc	r1, r21
    11b0:	54 f0       	brlt	.+20     	; 0x11c6 <_Z13delay_mks_100i+0x20>
    11b2:	08 95       	ret
    11b4:	00 00       	nop
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	e9 f7       	brne	.-6      	; 0x11b4 <_Z13delay_mks_100i+0xe>
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	24 17       	cp	r18, r20
    11c0:	35 07       	cpc	r19, r21
    11c2:	1c f0       	brlt	.+6      	; 0x11ca <_Z13delay_mks_100i+0x24>
    11c4:	08 95       	ret
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
void delay_mks_1000(int time){
 int i;int d;
 for (d=0;d<time+1;d++) {for (i=0;i<500;i++) {asm ("nop");}}
}

void delay_mks_100(int time){
    11ca:	8d e2       	ldi	r24, 0x2D	; 45
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	f2 cf       	rjmp	.-28     	; 0x11b4 <_Z13delay_mks_100i+0xe>

000011d0 <_Z12delay_mks_10i>:
 for (d=0;d<time+1;d++) {for (i=0;i<45;i++) {asm ("nop");}}
}

void delay_mks_10(int time){
 int i;int d;
 for (d=0;d<time+1;d++) {for (i=0;i<4;i++) {asm ("nop");}}
    11d0:	9c 01       	movw	r18, r24
    11d2:	2f 5f       	subi	r18, 0xFF	; 255
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	12 16       	cp	r1, r18
    11d8:	13 06       	cpc	r1, r19
    11da:	54 f4       	brge	.+20     	; 0x11f0 <_Z12delay_mks_10i+0x20>
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	90 e0       	ldi	r25, 0x00	; 0
	...
    11e8:	01 96       	adiw	r24, 0x01	; 1
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	c4 f3       	brlt	.-16     	; 0x11e0 <_Z12delay_mks_10i+0x10>
    11f0:	08 95       	ret

000011f2 <_Z9initDelayv>:
void delayFunc(void);
volatile char f_delay;
int mdelay;

void initDelay(void){
 mdelay=0;f_delay=0;
    11f2:	10 92 fb 00 	sts	0x00FB, r1
    11f6:	10 92 fa 00 	sts	0x00FA, r1
    11fa:	10 92 fc 00 	sts	0x00FC, r1
 RegVirtualTimer(&delayFunc);
    11fe:	8e e3       	ldi	r24, 0x3E	; 62
    1200:	98 e0       	ldi	r25, 0x08	; 8
    1202:	2c df       	rcall	.-424    	; 0x105c <_Z15RegVirtualTimerPFvvE>
}
    1204:	08 95       	ret

00001206 <main>:
}
#endif

int main(void){
 long int i;
 asm("cli");
    1206:	f8 94       	cli
 //set WDT
 WDTCR|=(1<<4)|(1<<3);
    1208:	81 b5       	in	r24, 0x21	; 33
    120a:	88 61       	ori	r24, 0x18	; 24
    120c:	81 bd       	out	0x21, r24	; 33
 WDTCR=0x0d;
    120e:	8d e0       	ldi	r24, 0x0D	; 13
    1210:	81 bd       	out	0x21, r24	; 33
 asm("wdr");
    1212:	a8 95       	wdr

 moveCh = 0;
    1214:	10 92 05 01 	sts	0x0105, r1
    1218:	10 92 04 01 	sts	0x0104, r1
 outsState = 0;
    121c:	10 92 00 01 	sts	0x0100, r1
 
 InitVirtualTimers();
    1220:	cc de       	rcall	.-616    	; 0xfba <_Z17InitVirtualTimersv>
 initDelay();
    1222:	e7 df       	rcall	.-50     	; 0x11f2 <_Z9initDelayv>
#ifdef BUTTONS
 InitLAMP();
 InitButtons();
#endif 
 InitADC();
    1224:	24 d7       	rcall	.+3656   	; 0x206e <__data_load_end+0xd8c>
 InitSensors();
    1226:	a2 de       	rcall	.-700    	; 0xf6c <_Z11InitSensorsv>
 DriveInit();
    1228:	2a d9       	rcall	.-3500   	; 0x47e <_Z9DriveInitv>
#ifndef BUTTONS
 Network::init();
    122a:	f9 db       	rcall	.-2062   	; 0xa1e <_ZN7Network4initEv>
 DDRD|=0x60;
    122c:	81 b3       	in	r24, 0x11	; 17
    122e:	80 66       	ori	r24, 0x60	; 96
    1230:	81 bb       	out	0x11, r24	; 17
#else
 SetLamp(0,1);
 SetLamp(1,1);
#endif
 asm("sei");
    1232:	78 94       	sei
 // loop
 DriveMove(0);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	7b d9       	rcall	.-3338   	; 0x52e <_Z9DriveMoveh>
 mainphase=0;
    1238:	10 92 01 01 	sts	0x0101, r1
 
 b0 = 1;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 93 ff 00 	sts	0x00FF, r24
 b1 = 1;
    1242:	80 93 fe 00 	sts	0x00FE, r24
 b2 = 1;
    1246:	80 93 fd 00 	sts	0x00FD, r24
 
 bVal[1] = 1;
    124a:	80 93 74 00 	sts	0x0074, r24
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	91 ea       	ldi	r25, 0xA1	; 161
    1252:	a7 e0       	ldi	r26, 0x07	; 7
    1254:	b0 e0       	ldi	r27, 0x00	; 0
 
 for (i=0;i<500000;i++) {asm("wdr");}
    1256:	a8 95       	wdr
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	a1 09       	sbc	r26, r1
    125c:	b1 09       	sbc	r27, r1
    125e:	d9 f7       	brne	.-10     	; 0x1256 <main+0x50>
 while (true){
   asm("wdr");
    1260:	a8 95       	wdr
#ifdef BUTTONS
   if (f_bTrueVal==1)
#endif     
   {
    RegVirtualTimer(&Process);
    1262:	8d e8       	ldi	r24, 0x8D	; 141
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	fa de       	rcall	.-524    	; 0x105c <_Z15RegVirtualTimerPFvvE>
    break;
   }
 }
 
 while (true) {asm("wdr");}
    1268:	a8 95       	wdr
    126a:	fe cf       	rjmp	.-4      	; 0x1268 <main+0x62>

0000126c <_Z5delayi>:
void delayFunc(void){
 if (mdelay==0) {f_delay=0;} else mdelay--;
}

void delay(int n){
 f_delay=1;mdelay=n;while (f_delay){asm("wdr");};
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	20 93 fc 00 	sts	0x00FC, r18
    1272:	90 93 fb 00 	sts	0x00FB, r25
    1276:	80 93 fa 00 	sts	0x00FA, r24
    127a:	80 91 fc 00 	lds	r24, 0x00FC
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <_Z5delayi+0x20>
    1282:	a8 95       	wdr
    1284:	80 91 fc 00 	lds	r24, 0x00FC
    1288:	88 23       	and	r24, r24
    128a:	d9 f7       	brne	.-10     	; 0x1282 <_Z5delayi+0x16>
    128c:	08 95       	ret

0000128e <__divmodhi4>:
    128e:	97 fb       	bst	r25, 7
    1290:	09 2e       	mov	r0, r25
    1292:	07 26       	eor	r0, r23
    1294:	0a d0       	rcall	.+20     	; 0x12aa <__divmodhi4_neg1>
    1296:	77 fd       	sbrc	r23, 7
    1298:	04 d0       	rcall	.+8      	; 0x12a2 <__divmodhi4_neg2>
    129a:	0c d0       	rcall	.+24     	; 0x12b4 <__udivmodhi4>
    129c:	06 d0       	rcall	.+12     	; 0x12aa <__divmodhi4_neg1>
    129e:	00 20       	and	r0, r0
    12a0:	1a f4       	brpl	.+6      	; 0x12a8 <__divmodhi4_exit>

000012a2 <__divmodhi4_neg2>:
    12a2:	70 95       	com	r23
    12a4:	61 95       	neg	r22
    12a6:	7f 4f       	sbci	r23, 0xFF	; 255

000012a8 <__divmodhi4_exit>:
    12a8:	08 95       	ret

000012aa <__divmodhi4_neg1>:
    12aa:	f6 f7       	brtc	.-4      	; 0x12a8 <__divmodhi4_exit>
    12ac:	90 95       	com	r25
    12ae:	81 95       	neg	r24
    12b0:	9f 4f       	sbci	r25, 0xFF	; 255
    12b2:	08 95       	ret

000012b4 <__udivmodhi4>:
    12b4:	aa 1b       	sub	r26, r26
    12b6:	bb 1b       	sub	r27, r27
    12b8:	51 e1       	ldi	r21, 0x11	; 17
    12ba:	07 c0       	rjmp	.+14     	; 0x12ca <__udivmodhi4_ep>

000012bc <__udivmodhi4_loop>:
    12bc:	aa 1f       	adc	r26, r26
    12be:	bb 1f       	adc	r27, r27
    12c0:	a6 17       	cp	r26, r22
    12c2:	b7 07       	cpc	r27, r23
    12c4:	10 f0       	brcs	.+4      	; 0x12ca <__udivmodhi4_ep>
    12c6:	a6 1b       	sub	r26, r22
    12c8:	b7 0b       	sbc	r27, r23

000012ca <__udivmodhi4_ep>:
    12ca:	88 1f       	adc	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	5a 95       	dec	r21
    12d0:	a9 f7       	brne	.-22     	; 0x12bc <__udivmodhi4_loop>
    12d2:	80 95       	com	r24
    12d4:	90 95       	com	r25
    12d6:	bc 01       	movw	r22, r24
    12d8:	cd 01       	movw	r24, r26
    12da:	08 95       	ret

000012dc <_exit>:
    12dc:	f8 94       	cli

000012de <__stop_program>:
    12de:	ff cf       	rjmp	.-2      	; 0x12de <__stop_program>
